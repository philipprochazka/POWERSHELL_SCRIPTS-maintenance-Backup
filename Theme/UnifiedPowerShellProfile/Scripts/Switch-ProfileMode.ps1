#requires -Version 5.1
<#
.SYNOPSIS
    üéØ PowerShell Profile Mode Switcher

.DESCRIPTION
    Interactive utility to switch between different PowerShell profile modes.
    Follows coding standards from copilot-instructions.md.

.PARAMETER Mode
    Profile mode to switch to directly without interactive menu

.PARAMETER Force
    Force the switch without confirmation prompts

.EXAMPLE
    .\Switch-ProfileMode.ps1
    Shows interactive menu to select profile mode

.EXAMPLE
    .\Switch-ProfileMode.ps1 -Mode Dracula -Force
    Switches directly to Dracula mode without prompts

.NOTES
    Author: GitHub Copilot
    Version: 1.0.0
    Follows PowerShell approved verbs and naming conventions
#>

[CmdletBinding()]
param(
    [Parameter()]
    [ValidateSet('Dracula', 'MCP', 'LazyAdmin', 'Minimal', 'Custom')]
    [string]$Mode,
    
    [Parameter()]
    [switch]$Force
)

begin {
    Write-Host "üéØ POWERSHELL PROFILE MODE SWITCHER üéØ" -ForegroundColor Cyan
    Write-Host "=" * 50 -ForegroundColor Gray
    
    # Define available profile modes
    $profileModes = @{
        'Dracula' = @{
            Name = 'üßõ‚Äç‚ôÇÔ∏è Dracula'
            Description = 'Enhanced theme with productivity features'
            File = 'Microsoft.PowerShell_profile_Dracula.ps1'
            Color = 'Magenta'
        }
        'MCP' = @{
            Name = 'üöÄ MCP'
            Description = 'Model Context Protocol with AI integration'
            File = 'Microsoft.PowerShell_profile_MCP.ps1'
            Color = 'Cyan'
        }
        'LazyAdmin' = @{
            Name = '‚ö° LazyAdmin'
            Description = 'System administration utilities'
            File = 'Microsoft.PowerShell_profile_LazyAdmin.ps1'
            Color = 'Yellow'
        }
        'Minimal' = @{
            Name = 'üéØ Minimal'
            Description = 'Lightweight setup'
            File = 'Microsoft.PowerShell_profile_Minimal.ps1'
            Color = 'Green'
        }
        'Custom' = @{
            Name = 'üõ†Ô∏è Custom'
            Description = 'User-defined configuration'
            File = 'Microsoft.PowerShell_profile_Custom.ps1'
            Color = 'White'
        }
    }
    
    $workspaceRoot = Split-Path $PSScriptRoot -Parent
}

process {
    try {
        # If no mode specified, show interactive menu
        if (-not $Mode) {
            Write-Host "`nüìã Available Profile Modes:" -ForegroundColor Green
            
            $index = 1
            foreach ($key in $profileModes.Keys) {
                $profile = $profileModes[$key]
                Write-Host "   $index. $($profile.Name) - $($profile.Description)" -ForegroundColor $profile.Color
                $index++
            }
            
            Write-Host "`n‚ùì Select a profile mode (1-$($profileModes.Count)): " -ForegroundColor Yellow -NoNewline
            $choice = Read-Host
            
            # Convert choice to mode
            $modeKeys = $profileModes.Keys | Sort-Object
            if ($choice -match '^\d+$' -and [int]$choice -ge 1 -and [int]$choice -le $profileModes.Count) {
                $Mode = $modeKeys[[int]$choice - 1]
            } else {
                Write-Error "‚ùå Invalid selection: $choice"
                exit 1
            }
        }
        
        # Validate mode exists
        if (-not $profileModes.ContainsKey($Mode)) {
            Write-Error "‚ùå Unknown profile mode: $Mode"
            exit 1
        }
        
        $selectedProfile = $profileModes[$Mode]
        $profilePath = Join-Path $workspaceRoot $selectedProfile.File
        
        # Check if profile file exists
        if (-not (Test-Path $profilePath)) {
            Write-Warning "‚ö†Ô∏è Profile file not found: $($selectedProfile.File)"
            Write-Host "üìÅ Expected location: $profilePath" -ForegroundColor Gray
            
            if (-not $Force) {
                $response = Read-Host "Would you like to create it? (y/N)"
                if ($response -notmatch '^[yY]') {
                    Write-Host "‚ùå Operation cancelled" -ForegroundColor Red
                    exit 1
                }
            }
            
            # Create basic profile template
            $template = @"
# $($selectedProfile.Name) Profile
# Generated by Profile Mode Switcher

Write-Host "$($selectedProfile.Name) Profile Loaded" -ForegroundColor $($selectedProfile.Color)

# Add your custom configuration here
"@
            Set-Content -Path $profilePath -Value $template -Encoding UTF8
            Write-Host "‚úÖ Created new profile: $($selectedProfile.File)" -ForegroundColor Green
        }
        
        # Get current PowerShell profile path
        $currentProfilePath = $PROFILE.CurrentUserCurrentHost
        $currentProfileDir = Split-Path $currentProfilePath -Parent
        
        # Ensure profile directory exists
        if (-not (Test-Path $currentProfileDir)) {
            New-Item -Path $currentProfileDir -ItemType Directory -Force | Out-Null
        }
        
        # Confirm switch
        if (-not $Force) {
            Write-Host "`nüîÑ Switch to $($selectedProfile.Name)?" -ForegroundColor Yellow
            Write-Host "   Current: $currentProfilePath" -ForegroundColor Gray
            Write-Host "   New: $profilePath" -ForegroundColor Gray
            
            $response = Read-Host "Continue? (Y/n)"
            if ($response -match '^[nN]') {
                Write-Host "‚ùå Operation cancelled" -ForegroundColor Red
                exit 0
            }
        }
        
        # Backup current profile if it exists
        if (Test-Path $currentProfilePath) {
            $backupPath = "$currentProfilePath.backup.$(Get-Date -Format 'yyyyMMdd-HHmmss')"
            Copy-Item $currentProfilePath $backupPath
            Write-Host "üíæ Backed up current profile to: $(Split-Path $backupPath -Leaf)" -ForegroundColor Gray
        }
        
        # Copy new profile
        Copy-Item $profilePath $currentProfilePath -Force
        Write-Host "‚úÖ Profile switched to $($selectedProfile.Name)" -ForegroundColor Green
        
        # Display next steps
        Write-Host "`nüéØ Next Steps:" -ForegroundColor Cyan
        Write-Host "   1. Restart PowerShell to load the new profile" -ForegroundColor White
        Write-Host "   2. Or run: . `$PROFILE" -ForegroundColor White
        
    }
    catch {
        Write-Error "‚ùå Profile switching failed: $($_.Exception.Message)"
        exit 1
    }
}

end {
    Write-Host "üéØ Profile mode switcher completed" -ForegroundColor Cyan
}
