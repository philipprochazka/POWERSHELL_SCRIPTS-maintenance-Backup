{
    "version": "2.0.0",
    "options": {
        "shell": {
            "executable": "pwsh.exe",
            "args": [
                "-NoProfile",
                "-ExecutionPolicy",
                "Bypass",
                "-Command"
            ]
        }
    },
    "tasks": [
        {
            "label": "üöÄ Install Unified Profile System (Enhanced)",
            "type": "shell",
            "command": "Import-Module \"${workspaceFolder}\\PowerShellModules\\UnifiedPowerShellProfile\" -Force; Install-UnifiedProfileSystem -IncludeRegistryChanges -EnableCamelCaseNavigation -EnableDiacriticsSupport -Verbose",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": [],
            "options": {
                "env": {
                    "ENABLE_CAMELCASE_NAV": "true",
                    "ENABLE_DIACRITICS": "true",
                    "UNIFIED_PROFILE_DEBUG": "true"
                }
            }
        },
        {
            "label": "‚ö° Quick Install (Dracula + Smart Navigation)",
            "type": "shell",
            "command": "& \"${workspaceFolder}\\Start-UnifiedProfile.ps1\" -Quick; Write-Host 'üê™ CamelCase Navigation: ENABLED' -ForegroundColor Green; Write-Host 'üåç Diacritics Support: ENABLED' -ForegroundColor Green",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            },
            "options": {
                "env": {
                    "ENABLE_CAMELCASE_NAV": "true",
                    "ENABLE_DIACRITICS": "true"
                }
            }
        },
        {
            "label": "üîß Full Install (All Features + Smart Navigation)",
            "type": "shell",
            "command": "& \"${workspaceFolder}\\Start-UnifiedProfile.ps1\" -Full; Write-Host 'üéâ Complete installation with enhanced features!' -ForegroundColor Magenta",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            },
            "options": {
                "env": {
                    "ENABLE_CAMELCASE_NAV": "true",
                    "ENABLE_DIACRITICS": "true",
                    "UNIFIED_PROFILE_DEBUG": "true"
                }
            }
        },
        {
            "label": "üéõÔ∏è Interactive Install (Menu-Driven Setup)",
            "type": "shell",
            "command": "& \"${workspaceFolder}\\Start-UnifiedProfile.ps1\" -Interactive",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üßõ‚Äç‚ôÇÔ∏è Switch to Dracula Mode (+ Smart Navigation)",
            "type": "shell",
            "command": "Import-Module UnifiedPowerShellProfile -Force; Initialize-UnifiedProfile -Mode Dracula -EnableRealtimeLinting; Write-Host 'üßõ‚Äç‚ôÇÔ∏è Dracula Mode Active with Enhanced Features!' -ForegroundColor Magenta",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "options": {
                "env": {
                    "ENABLE_CAMELCASE_NAV": "true",
                    "ENABLE_DIACRITICS": "true",
                    "DRACULA_ENHANCED_MODE": "true"
                }
            }
        },
        {
            "label": "üöÄ Switch to MCP Mode (+ Smart Navigation)",
            "type": "shell",
            "command": "Import-Module UnifiedPowerShellProfile -Force; Initialize-UnifiedProfile -Mode MCP -EnableRealtimeLinting; Write-Host 'üöÄ MCP Mode Active with AI Integration!' -ForegroundColor Cyan",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "options": {
                "env": {
                    "ENABLE_CAMELCASE_NAV": "true",
                    "ENABLE_DIACRITICS": "true",
                    "MCP_ENHANCED_MODE": "true"
                }
            }
        },
        {
            "label": "‚ö° Switch to LazyAdmin Mode (+ Smart Navigation)",
            "type": "shell",
            "command": "Import-Module UnifiedPowerShellProfile -Force; Initialize-UnifiedProfile -Mode LazyAdmin -EnableRealtimeLinting; Write-Host '‚ö° LazyAdmin Mode Active with Sysadmin Tools!' -ForegroundColor Yellow",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "options": {
                "env": {
                    "ENABLE_CAMELCASE_NAV": "true",
                    "ENABLE_DIACRITICS": "true",
                    "LAZYADMIN_ENHANCED_MODE": "true"
                }
            }
        },
        {
            "label": "üéØ Switch to Minimal Mode (+ Smart Navigation)",
            "type": "shell",
            "command": "Import-Module UnifiedPowerShellProfile -Force; Initialize-UnifiedProfile -Mode Minimal; Write-Host 'üéØ Minimal Mode Active - Lightweight with Core Features!' -ForegroundColor Green",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "options": {
                "env": {
                    "ENABLE_CAMELCASE_NAV": "true",
                    "ENABLE_DIACRITICS": "true"
                }
            }
        },
        {
            "label": "üß™ Test Profile Configuration (Comprehensive)",
            "type": "shell",
            "command": "Import-Module UnifiedPowerShellProfile -Force; Write-Host 'üîç Testing Profile Configuration...' -ForegroundColor Cyan; Test-ProfileConfiguration -Detailed; Write-Host ''; Write-Host 'üìä Profile Status:' -ForegroundColor Yellow; Get-ProfileStatus -Verbose",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üìä Module Version Validation",
            "type": "shell",
            "command": "Write-Host 'üîç PowerShell Environment Analysis' -ForegroundColor Magenta; Write-Host '==================================' -ForegroundColor DarkMagenta; Write-Host ''; Write-Host 'üìã PowerShell Version:' -ForegroundColor Cyan; $PSVersionTable.PSVersion; Write-Host ''; Write-Host 'üì¶ Required Modules Status:' -ForegroundColor Cyan; $requiredModules = @('PSReadLine', 'Terminal-Icons', 'z', 'PSFzf', 'UnifiedPowerShellProfile', 'PSScriptAnalyzer'); foreach ($module in $requiredModules) { $available = Get-Module $module -ListAvailable | Select-Object -First 1; if ($available) { Write-Host \"‚úÖ $module - v$($available.Version)\" -ForegroundColor Green } else { Write-Host \"‚ùå $module - Not Found\" -ForegroundColor Red } }",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üîç PowerShell Environment Analysis",
            "type": "shell",
            "command": "Write-Host 'üîç Detailed Environment Analysis' -ForegroundColor Magenta; Write-Host '================================' -ForegroundColor DarkMagenta; Write-Host ''; Write-Host 'üìã PowerShell Details:' -ForegroundColor Cyan; $PSVersionTable | Format-Table -AutoSize; Write-Host 'üìÇ Module Paths:' -ForegroundColor Cyan; $env:PSModulePath -split ';' | ForEach-Object { Write-Host \"  $_\" -ForegroundColor Gray }; Write-Host ''; Write-Host 'üì¶ All Loaded Modules:' -ForegroundColor Cyan; Get-Module | Format-Table Name, Version, ModuleType -AutoSize",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üéØ Module Health Check (Quick)",
            "type": "shell",
            "command": "$healthModules = @('PSReadLine', 'Terminal-Icons', 'z', 'PSFzf', 'UnifiedPowerShellProfile', 'PSScriptAnalyzer', 'Pester'); Write-Host 'üè• Quick Module Health Check' -ForegroundColor Green; Write-Host '============================' -ForegroundColor DarkGreen; Write-Host ''; foreach ($module in $healthModules) { try { $available = Get-Module $module -ListAvailable | Select-Object -First 1; if ($available) { Write-Host \"‚úÖ $module\" -NoNewline -ForegroundColor Green; Write-Host \" - v$($available.Version)\" -ForegroundColor Gray; if (Get-Module $module) { Write-Host \"   üìç Currently loaded\" -ForegroundColor Yellow } } else { Write-Host \"‚ùå $module - Not Available\" -ForegroundColor Red } } catch { Write-Host \"‚ö†Ô∏è $module - Error checking\" -ForegroundColor Yellow } }; Write-Host ''; Write-Host 'üí° Run \"üìä Module Version Validation\" for detailed analysis' -ForegroundColor Cyan",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "üê™ Test CamelCase Navigation",
            "type": "shell",
            "command": "$env:ENABLE_CAMELCASE_NAV='true'; Write-Host 'üê™ CamelCase Navigation Test' -ForegroundColor Yellow; Write-Host '============================' -ForegroundColor DarkYellow; Write-Host ''; Write-Host 'Testing CamelCase word boundaries...' -ForegroundColor Cyan; $examples = @('Get-ChildItem', 'New-VSCodeWorkspace', 'Initialize-UnifiedProfile', 'Test-PowerShellSyntax', 'Import-ModuleAdvanced'); Write-Host 'Example CamelCase commands:' -ForegroundColor Green; $examples | ForEach-Object { Write-Host \"  $_\" -ForegroundColor White }; Write-Host ''; Write-Host 'üí° Use Ctrl+Left/Right to jump between CamelCase words!' -ForegroundColor Magenta; Write-Host 'üéØ Smart navigation should work with these examples.' -ForegroundColor Cyan",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üåç Test Diacritics Support",
            "type": "shell",
            "command": "$env:ENABLE_DIACRITICS='true'; Write-Host 'üåç International Diacritics Support Test' -ForegroundColor Cyan; Write-Host '=======================================' -ForegroundColor DarkCyan; Write-Host ''; Write-Host 'Testing international character support...' -ForegroundColor Yellow; $examples = @(@{Lang='üá®üáø Czech'; Text='p≈ô√≠kaz-sN√°zvem-ƒçe≈°tina_promƒõnn√°'}, @{Lang='üá™üá∏ Spanish'; Text='funci√≥n-conAcentos-espa√±ol_variable'}, @{Lang='üá´üá∑ French'; Text='commentaireAvecAccents-fran√ßais_donn√©es'}, @{Lang='üá©üá™ German'; Text='funktionMitUmlauten-gr√∂√üe_variable√Ñ√∂√º'}, @{Lang='üáµüá± Polish'; Text='funkcja-zPolskimiZnakami-ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º_zmienna'}); Write-Host 'International examples:' -ForegroundColor Green; $examples | ForEach-Object { Write-Host \"  $($_.Lang): $($_.Text)\" -ForegroundColor White }; Write-Host ''; Write-Host 'üí° Smart navigation works with ALL accented characters!' -ForegroundColor Magenta; Write-Host 'üéØ Copy/paste these examples to test navigation.' -ForegroundColor Cyan",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üé® Demo Enhanced Features (Interactive)",
            "type": "shell",
            "command": "& \"${workspaceFolder}\\Demo-EnhancedDraculaFeatures.ps1\"",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            },
            "options": {
                "env": {
                    "ENABLE_CAMELCASE_NAV": "true",
                    "ENABLE_DIACRITICS": "true"
                }
            }
        },
        {
            "label": "üèÜ Performance Benchmark (Comprehensive)",
            "type": "shell",
            "command": "if (Test-Path \"${workspaceFolder}\\Test-UltraPerformanceComparison.ps1\") { & \"${workspaceFolder}\\Test-UltraPerformanceComparison.ps1\" -TestMode Comprehensive -Iterations 10 -GenerateReport } else { Write-Host '‚ö†Ô∏è Performance test script not found' -ForegroundColor Yellow; Write-Host 'üìç Looking for: Test-UltraPerformanceComparison.ps1' -ForegroundColor Gray }",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üìä Performance Benchmark (Quick)",
            "type": "shell",
            "command": "if (Test-Path \"${workspaceFolder}\\Test-UltraPerformanceComparison.ps1\") { & \"${workspaceFolder}\\Test-UltraPerformanceComparison.ps1\" -TestMode Quick -GenerateReport } else { Write-Host '‚ö†Ô∏è Performance test script not found' -ForegroundColor Yellow; Write-Host 'üí° Creating basic performance test...' -ForegroundColor Cyan; Measure-Command { Get-Process | Select-Object -First 50 } | Format-Table TotalMilliseconds }",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "üîÑ Reload Unified Profile System",
            "type": "shell",
            "command": "Write-Host 'üîÑ Reloading Unified Profile System...' -ForegroundColor Cyan; Remove-Module UnifiedPowerShellProfile -ErrorAction SilentlyContinue; Import-Module \"${workspaceFolder}\\PowerShellModules\\UnifiedPowerShellProfile\" -Force; Write-Host '‚úÖ Module reloaded successfully!' -ForegroundColor Green",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "üßπ Clean Module Cache",
            "type": "shell",
            "command": "Write-Host 'üßπ Cleaning PowerShell Module Cache...' -ForegroundColor Yellow; Get-Module | Where-Object { $_.Name -like '*Unified*' -or $_.Name -like '*Dracula*' } | Remove-Module -Force; Write-Host '‚úÖ Module cache cleaned!' -ForegroundColor Green; Write-Host 'üí° Use \"üîÑ Reload Unified Profile System\" to reload.' -ForegroundColor Cyan",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "üìö Update Documentation",
            "type": "shell",
            "command": "if (Get-Command Build-ModuleDocumentation -ErrorAction SilentlyContinue) { Build-ModuleDocumentation -ModulePath \"${workspaceFolder}\\PowerShellModules\\UnifiedPowerShellProfile\" } else { Write-Host 'üìö Building documentation...' -ForegroundColor Cyan; Write-Host 'üí° Documentation build tools not available' -ForegroundColor Yellow }",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "üÜò Diagnose Profile Issues",
            "type": "shell",
            "command": "Write-Host 'üÜò Profile Diagnostic Report' -ForegroundColor Red; Write-Host '============================' -ForegroundColor DarkRed; Write-Host ''; Write-Host 'üîç Checking module availability...' -ForegroundColor Yellow; $diagnosticModules = @('UnifiedPowerShellProfile', 'PSReadLine', 'Terminal-Icons'); foreach ($module in $diagnosticModules) { $moduleInfo = Get-Module $module -ListAvailable | Select-Object -First 1; if ($moduleInfo) { Write-Host \"‚úÖ $module found at: $($moduleInfo.ModuleBase)\" -ForegroundColor Green } else { Write-Host \"‚ùå $module NOT FOUND\" -ForegroundColor Red } }; Write-Host ''; Write-Host 'üîç Checking profile files...' -ForegroundColor Yellow; $profiles = @($PROFILE.CurrentUserCurrentHost, $PROFILE.CurrentUserAllHosts, $PROFILE.AllUsersCurrentHost, $PROFILE.AllUsersAllHosts); foreach ($profile in $profiles) { if ($profile -and (Test-Path $profile)) { Write-Host \"‚úÖ Profile exists: $profile\" -ForegroundColor Green } else { Write-Host \"‚ö†Ô∏è Profile missing: $profile\" -ForegroundColor Yellow } }",
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        },
        {
            "label": "üîß Reset Profile Configuration",
            "type": "shell",
            "command": "Write-Host 'üîß Resetting Profile Configuration...' -ForegroundColor Yellow; Write-Host '‚ö†Ô∏è This will reset your profile to defaults' -ForegroundColor Red; $confirmation = Read-Host 'Type YES to continue'; if ($confirmation -eq 'YES') { Remove-Module UnifiedPowerShellProfile -ErrorAction SilentlyContinue; & \"${workspaceFolder}\\Install-UnifiedProfile.ps1\" -Mode Dracula -Force; Write-Host '‚úÖ Profile reset complete!' -ForegroundColor Green } else { Write-Host '‚ùå Reset cancelled' -ForegroundColor Gray }",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared"
            }
        }
    ]
}