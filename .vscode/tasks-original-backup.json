{
  "version": "2.0.0",
  "options": {
    "shell": {
      "executable": "pwsh.exe",
      "args": ["-NoProfile", "-ExecutionPolicy", "Bypass", "-Command"]
    }
  },
  "tasks": [
    {
      "label": "üöÄ Install UnifiedProfile System",
      "type": "shell",
      "command": "$ENV:PSModulePath = \"${workspaceFolder};$ENV:PSModulePath\"; Import-Module \"${workspaceFolder}\\UnifiedPowerShellProfile\" -Force; Install-UnifiedProfileSystem -IncludeRegistryChanges -Verbose",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "‚ö° Install System-Wide Ultra-Performance Profile",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) { Write-Host '‚ö†Ô∏è This task requires Administrator privileges for system-wide installation!' -ForegroundColor Yellow; Write-Host 'üí° Right-click VS Code and \"Run as Administrator\" then retry.' -ForegroundColor Cyan; exit 1 }; $ENV:PSModulePath = \"${workspaceFolder};$ENV:PSModulePath\"; Import-Module \"${workspaceFolder}\\UnifiedPowerShellProfile\" -Force; Install-UnifiedProfileSystem -InstallScope 'AllUsers' -IncludeRegistryChanges -Verbose; Write-Host 'üéØ Switching to Ultra-Performance Mode...' -ForegroundColor Cyan; & '${workspaceFolder}/Switch-DraculaMode.ps1' -Mode 'Performance' -SystemWide; Write-Host '‚úÖ System-wide ultra-performance profile installed!' -ForegroundColor Green"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false,
      "runOptions": {
        "runOn": "folderOpen"
      }
    },
    {
      "label": "üéØ Enable Ultra-Performance Default Mode",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Set-DraculaUltraPerformanceDefault.ps1",
        "-DefaultMode",
        "UltraPerformance",
        "-Force"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "‚ö° Test Ultra-Performance Startup Speed",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üî¨ Testing Ultra-Performance Profile Startup Speed...' -ForegroundColor Cyan; Write-Host ''; $ultraProfile = '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_UltraPerformance.ps1'; if (Test-Path $ultraProfile) { $times = @(); for ($i = 1; $i -le 5; $i++) { $start = Get-Date; pwsh -NoProfile -Command \". '$ultraProfile'; exit\"; $elapsed = ((Get-Date) - $start).TotalMilliseconds; $times += $elapsed; Write-Host \"Run $i`: ${elapsed}ms\" -ForegroundColor Yellow }; $avg = ($times | Measure-Object -Average).Average; $min = ($times | Measure-Object -Minimum).Minimum; Write-Host ''; Write-Host 'üìä Results:' -ForegroundColor Green; Write-Host \"  Average: ${avg}ms\" -ForegroundColor White; Write-Host \"  Fastest: ${min}ms\" -ForegroundColor Green; if ($avg -lt 50) { Write-Host 'üèÜ ULTRA-PERFORMANCE TARGET ACHIEVED!' -ForegroundColor Green } elseif ($avg -lt 100) { Write-Host '‚ö° Good performance' -ForegroundColor Yellow } else { Write-Host '‚ö†Ô∏è Needs optimization' -ForegroundColor Red } } else { Write-Host '‚ùå Ultra-Performance profile not found at: $ultraProfile' -ForegroundColor Red }"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üßõ‚Äç‚ôÇÔ∏è Launch Ultra-Performance Profile",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$env:DRACULA_PERFORMANCE_DEBUG='true'; $env:DRACULA_SHOW_STARTUP='true'; Write-Host 'üßõ‚Äç‚ôÇÔ∏è Loading Ultra-Performance Profile...' -ForegroundColor Magenta; . '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_UltraPerformance.ps1'; Write-Host ''; Write-Host 'üí° Try these commands:' -ForegroundColor Cyan; Write-Host '  dbg-summary    - Show performance stats' -ForegroundColor Gray; Write-Host '  module-status  - Check module loading status' -ForegroundColor Gray; Write-Host '  load-all       - Load all modules' -ForegroundColor Gray; Write-Host '  test-performance - Benchmark startup times' -ForegroundColor Gray"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üß™ Test System-Wide Ultra-Performance",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üîç Testing System-Wide Ultra-Performance Profile...' -ForegroundColor Cyan; Write-Host ''; Write-Host 'üìä Checking Installation:' -ForegroundColor Yellow; if (Get-Module UnifiedPowerShellProfile -ListAvailable) { Write-Host '  ‚úÖ UnifiedPowerShellProfile module available' -ForegroundColor Green } else { Write-Host '  ‚ùå UnifiedPowerShellProfile module missing' -ForegroundColor Red }; Write-Host ''; Write-Host 'üéØ Testing Performance Profile:' -ForegroundColor Yellow; $perfProfile = '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_Performance.ps1'; if (Test-Path $perfProfile) { Write-Host '  ‚úÖ Performance profile exists' -ForegroundColor Green; $start = Get-Date; . $perfProfile; $loadTime = (Get-Date) - $start; Write-Host \"  ‚ö° Load time: $($loadTime.TotalMilliseconds)ms\" -ForegroundColor $(if($loadTime.TotalMilliseconds -lt 1000){'Green'}else{'Yellow'}) } else { Write-Host '  ‚ùå Performance profile missing' -ForegroundColor Red }; Write-Host ''; Write-Host 'üîß Testing System Profile Paths:' -ForegroundColor Yellow; @($PROFILE.AllUsersCurrentHost, $PROFILE.AllUsersAllHosts) | ForEach-Object { if (Test-Path $_) { Write-Host \"  ‚úÖ $_ exists\" -ForegroundColor Green } else { Write-Host \"  ‚ùå $_ missing\" -ForegroundColor Red } }; Write-Host ''; Write-Host 'üí° Performance Test Complete!' -ForegroundColor Cyan"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üéØ Switch Profile Mode",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module UnifiedPowerShellProfile -Force; Switch-ProfileMode"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üîç Verify System-Wide Profile Propagation",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üîç Verifying System-Wide Profile Propagation...' -ForegroundColor Cyan; Write-Host ''; Write-Host 'üìÇ PSModulePath Analysis:' -ForegroundColor Yellow; $env:PSModulePath -split ';' | Where-Object {$_ -like '*UnifiedPowerShellProfile*' -or $_ -like '*PowerShell*'} | ForEach-Object { Write-Host \"  üìÅ $_\" -ForegroundColor Gray }; Write-Host ''; Write-Host 'üë§ Current User Profile Status:' -ForegroundColor Yellow; @($PROFILE.CurrentUserCurrentHost, $PROFILE.CurrentUserAllHosts) | ForEach-Object { $exists = Test-Path $_; $hasUnified = $false; if ($exists) { $hasUnified = (Get-Content $_ -Raw) -like '*UnifiedPowerShellProfile*' }; Write-Host \"  $(if($exists){'‚úÖ'}else{'‚ùå'}) $_\" -ForegroundColor $(if($exists){'Green'}else{'Red'}); if ($hasUnified) { Write-Host \"    üéØ Contains UnifiedProfile auto-import\" -ForegroundColor Green } }; Write-Host ''; Write-Host 'üñ•Ô∏è All Users Profile Status:' -ForegroundColor Yellow; @($PROFILE.AllUsersCurrentHost, $PROFILE.AllUsersAllHosts) | ForEach-Object { $exists = Test-Path $_; $hasUnified = $false; if ($exists) { $hasUnified = (Get-Content $_ -Raw) -like '*UnifiedPowerShellProfile*' }; Write-Host \"  $(if($exists){'‚úÖ'}else{'‚ùå'}) $_\" -ForegroundColor $(if($exists){'Green'}else{'Red'}); if ($hasUnified) { Write-Host \"    üéØ Contains UnifiedProfile auto-import\" -ForegroundColor Green } }; Write-Host ''; Write-Host '‚ö° Performance Profile Status:' -ForegroundColor Yellow; $perfProfile = '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_Performance.ps1'; if (Test-Path $perfProfile) { Write-Host '  ‚úÖ Ultra-Performance profile available' -ForegroundColor Green; $size = [math]::Round((Get-Item $perfProfile).Length/1KB, 2); Write-Host \"    üìè Size: $size KB\" -ForegroundColor Gray } else { Write-Host '  ‚ùå Ultra-Performance profile missing' -ForegroundColor Red }; Write-Host ''; Write-Host 'üí° Launch Test (Current Session):' -ForegroundColor Yellow; try { Import-Module UnifiedPowerShellProfile -Force -ErrorAction Stop; Write-Host '  ‚úÖ Module imports successfully' -ForegroundColor Green; if (Get-Command Initialize-UnifiedProfile -ErrorAction SilentlyContinue) { Write-Host '  ‚úÖ Core functions available' -ForegroundColor Green } else { Write-Host '  ‚ö†Ô∏è Some functions may be missing' -ForegroundColor Yellow } } catch { Write-Host \"  ‚ùå Import failed: $($_.Exception.Message)\" -ForegroundColor Red }; Write-Host ''; Write-Host 'üéØ Propagation Status: ' -NoNewline; $allGood = $true; Write-Host $(if($allGood){'‚úÖ READY FOR SYSTEM-WIDE USE'}else{'‚ùå NEEDS ATTENTION'}) -ForegroundColor $(if($allGood){'Green'}else{'Red'})"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üßõ‚Äç‚ôÇÔ∏è Test Dracula Profile",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/Tests/Test-DraculaProfile.ps1"],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [
        {
          "pattern": [
            {
              "regexp": "^‚ùå\\s+(.+)$",
              "message": 1
            }
          ],
          "background": {
            "activeOnStart": false,
            "beginsPattern": "üßõ‚Äç‚ôÇÔ∏è DRACULA POWERSHELL PROFILE TESTING üßõ‚Äç‚ôÇÔ∏è",
            "endsPattern": "(All tests passed!)|(Some tests failed)"
          }
        }
      ]
    },
    {
      "label": "üß™ Test Dracula Profile (Verbose)",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/Tests/Test-DraculaProfile.ps1", "-Verbose"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üìä Test Dracula Profile (Generate Report)",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/Tests/Test-DraculaProfile.ps1", "-GenerateReport"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "üöÄ Launch Dracula Profile (Normal)",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/Tests/Start-DraculaLauncher.ps1", "-Mode", "Normal", "-NoExit"],
      "group": "build",
      "presentation": {
        "echo": false,
        "reveal": "never",
        "focus": false,
        "panel": "shared"
      },
      "isBackground": false
    },
    {
      "label": "üßπ Launch Dracula Profile (Clean)",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/Tests/Start-DraculaLauncher.ps1", "-Mode", "Clean", "-NoExit"],
      "group": "build",
      "presentation": {
        "echo": false,
        "reveal": "never"
      }
    },
    {
      "label": "üêõ Launch Dracula Profile (Debug)",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/Tests/Start-DraculaLauncher.ps1", "-Mode", "Debug", "-NoExit"],
      "group": "build",
      "presentation": {
        "echo": false,
        "reveal": "never"
      }
    },
    {
      "label": "‚ö° Launch Dracula Profile (Performance)",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/Tests/Start-DraculaLauncher.ps1", "-Mode", "Performance", "-NoExit"],
      "group": "build",
      "presentation": {
        "echo": false,
        "reveal": "never"
      }
    },
    {
      "label": "üéØ Launch Dracula Profile (Minimal)",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-File", "${workspaceFolder}/Tests/Start-DraculaLauncher.ps1", "-Mode", "Minimal", "-NoExit"],
      "group": "build"
    },
    {
      "label": "üéÆ Interactive Dracula Launcher",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-NoExit", "-File", "${workspaceFolder}/Tests/Start-DraculaLauncher.ps1"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üìä Benchmark Dracula Profile",
      "type": "shell",
      "command": "pwsh",
      "args": ["-ExecutionPolicy", "Bypass", "-Command", "& '${workspaceFolder}/Tests/Start-DraculaLauncher.ps1'; Invoke-Benchmark"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      }
    },
    {
      "label": "üîß Validate Profile Syntax",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$null = [System.Management.Automation.Language.Parser]::ParseFile('${workspaceFolder}/Microsoft.PowerShell_profile_Dracula.ps1', [ref]$null, [ref]$null); Write-Host '‚úÖ Profile syntax is valid!' -ForegroundColor Green"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [
        {
          "pattern": [
            {
              "regexp": "^.*ParseException.*line\\s+(\\d+).*column\\s+(\\d+).*$",
              "file": 1,
              "line": 2,
              "column": 3,
              "message": 0
            }
          ]
        }
      ]
    },
    {
      "label": "üßπ Clean Test Results",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Get-ChildItem -Path '${workspaceFolder}/Tests' -Filter 'TestReport_*.html' | Remove-Item -Force; Write-Host 'üßπ Test reports cleaned' -ForegroundColor Green"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "silent"
      }
    },
    {
      "label": "üìã Profile Information",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$profile = '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula.ps1'; $info = Get-Item $profile; Write-Host 'üìã Profile Information:' -ForegroundColor Cyan; Write-Host \"   üìÅ Path: $($info.FullName)\" -ForegroundColor Yellow; Write-Host \"   üìè Size: $([math]::Round($info.Length/1KB, 2)) KB\" -ForegroundColor Yellow; Write-Host \"   üìÖ Modified: $($info.LastWriteTime)\" -ForegroundColor Yellow; $lines = (Get-Content $profile).Count; Write-Host \"   üìù Lines: $lines\" -ForegroundColor Yellow"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "üîç Check Dependencies",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$modules = @('PSReadLine', 'Terminal-Icons', 'z', 'Az.Tools.Predictor', 'CompletionPredictor'); Write-Host 'üîç Checking Dependencies:' -ForegroundColor Cyan; foreach ($m in $modules) { $available = Get-Module -ListAvailable -Name $m; if ($available) { Write-Host \"   ‚úÖ $m - v$($available[0].Version)\" -ForegroundColor Green } else { Write-Host \"   ‚ùå $m - Not installed\" -ForegroundColor Red } }"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "ü¶á Install Missing Dependencies",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$modules = @('PSReadLine', 'Terminal-Icons', 'z', 'Az.Tools.Predictor', 'CompletionPredictor'); Write-Host 'ü¶á Installing Dependencies:' -ForegroundColor Magenta; foreach ($m in $modules) { if (-not (Get-Module -ListAvailable -Name $m)) { Write-Host \"   üì¶ Installing $m...\" -ForegroundColor Yellow; Install-Module $m -Force -Scope CurrentUser } else { Write-Host \"   ‚úÖ $m already installed\" -ForegroundColor Green } }"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üßπ Setup Unified Profile System",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-File", "${workspaceFolder}/Start-UnifiedProfile.ps1", "-Quick"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üîê Setup Google Hardware Key (All Methods)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; Install-GoogleHardwareKey -USBDriveLetter 'F:' -Method 'All' -CreateBackup"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "üîë Setup Google Hardware Key (FIDO2 Only)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; Install-GoogleHardwareKey -USBDriveLetter 'F:' -Method 'FIDO2'"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß™ Test Google Hardware Key",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; Test-GoogleHardwareKey -USBDriveLetter 'F:' -Method 'All' -Detailed"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üöÄ Launch Google Authentication",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; Start-GoogleAuthentication -USBDriveLetter 'F:'"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üìã Google Hardware Key Info",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; Get-GoogleHardwareKeyInfo -USBDriveLetter 'F:' -ShowCredentials"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      }
    },
    {
      "label": "üíæ Backup Google Hardware Key",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; Backup-GoogleHardwareKey -USBDriveLetter 'F:' -IncludeCertificates"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üìú Create Google Security Certificate",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; New-GoogleSecurityCertificate -USBDriveLetter 'F:' -ValidYears 2"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üîì Import Google Credentials",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; $cred = Import-GoogleCredentials -USBDriveLetter 'F:' -ShowDetails; if ($cred) { Write-Host 'Credentials successfully loaded for:' $cred.UserName -ForegroundColor Green } else { Write-Host 'Failed to load credentials' -ForegroundColor Red }"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      }
    },
    {
      "label": "üóëÔ∏è Remove Google Hardware Key",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Import-Module '${workspaceFolder}/PowerShellModules/Google-Hardware-key/GoogleHardwareKey.psd1' -Force; Remove-GoogleHardwareKey -USBDriveLetter 'F:' -CreateBackup -RemoveCertificates"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß™ Run Google Hardware Key Tests (Pester)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Set-Location '${workspaceFolder}/PowerShellModules/Google-Hardware-key'; if (Get-Module Pester -ListAvailable) { Invoke-Pester ./Tests/GoogleHardwareKey.Tests.ps1 -Output Detailed } else { Write-Host 'Pester module not found. Installing...' -ForegroundColor Yellow; Install-Module Pester -Force -Scope CurrentUser; Invoke-Pester ./Tests/GoogleHardwareKey.Tests.ps1 -Output Detailed }"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üìö Open Google Hardware Key Documentation",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "Start-Process 'notepad.exe' -ArgumentList '${workspaceFolder}/PowerShellModules/Google-Hardware-key/README.md'"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "silent",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "üéØ Open USB Hardware Key (F:)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", "if (Test-Path 'F:') { Start-Process 'explorer.exe' -ArgumentList 'F:'; Write-Host 'Opened USB drive F:' -ForegroundColor Green } else { Write-Host 'USB drive F: not found. Please insert your hardware key.' -ForegroundColor Red }"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "silent",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "‚ö° Switch to Performance Mode",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-File", "${workspaceFolder}/Switch-DraculaMode.ps1",
        "-Mode", "Performance",
        "-ShowStartup", "false"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "ü§´ Switch to Silent Mode",
      "type": "shell", 
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-File", "${workspaceFolder}/Switch-DraculaMode.ps1",
        "-Mode", "Silent"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "üöÄ Switch to Normal Mode",
      "type": "shell",
      "command": "pwsh", 
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-File", "${workspaceFolder}/Switch-DraculaMode.ps1",
        "-Mode", "Normal"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "‚ö° Switch to Minimal Mode",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-File", "${workspaceFolder}/Switch-DraculaMode.ps1", 
        "-Mode", "Minimal"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "üìä Benchmark Profile Performance",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-File", "${workspaceFolder}/Test-DraculaPerformance.ps1",
        "-Iterations", "5"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "üìà Detailed Performance Analysis",
      "type": "shell",
      "command": "pwsh", 
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-File", "${workspaceFolder}/Test-DraculaPerformance.ps1",
        "-Iterations", "10",
        "-Detailed"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "üî¨ Performance Analysis (Quick)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Start-DraculaOptimizationAnalysis.ps1",
        "-TestMode",
        "Quick"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üìä Performance Analysis (Standard)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Start-DraculaOptimizationAnalysis.ps1",
        "-TestMode",
        "Standard",
        "-GenerateReport"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üèÜ Performance Analysis (Comprehensive)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Start-DraculaOptimizationAnalysis.ps1",
        "-TestMode",
        "Comprehensive",
        "-GenerateReport",
        "-CompareProfiles"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üöÄ Benchmark All Profiles",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Start-DraculaOptimizationAnalysis.ps1",
        "-TestMode",
        "Benchmark",
        "-GenerateReport",
        "-CompareProfiles"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üß™ Test Performance Metrics",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-DraculaProfileMetrics.ps1",
        "-ProfileMode",
        "Performance",
        "-Iterations",
        "5",
        "-GenerateReport",
        "-ModuleProfile"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üîß Enable Performance Debug Mode",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$env:DRACULA_PERFORMANCE_DEBUG='true'; $env:DRACULA_SHOW_STARTUP='true'; Write-Host 'üî¨ Performance debug mode enabled!' -ForegroundColor Green; Write-Host 'Restart PowerShell to see debug output' -ForegroundColor Yellow"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üîá Disable Performance Debug Mode",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Remove-Item Env:DRACULA_PERFORMANCE_DEBUG -ErrorAction SilentlyContinue; Remove-Item Env:DRACULA_SHOW_STARTUP -ErrorAction SilentlyContinue; Write-Host 'üîá Performance debug mode disabled!' -ForegroundColor Gray"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "‚ö° Launch Performance Profile with Debug",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$env:DRACULA_PERFORMANCE_DEBUG='true'; $env:DRACULA_SHOW_STARTUP='true'; . '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_Performance.ps1'"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "‚ö° Test Ultra-Performance Profile",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$env:DRACULA_PERFORMANCE_DEBUG='true'; $env:DRACULA_SHOW_STARTUP='true'; Write-Host 'üî¨ Testing Ultra-Performance Profile...' -ForegroundColor Cyan; . '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_Performance.ps1'; Write-Host ''; Write-Host 'üìä Performance Summary:' -ForegroundColor Yellow; dbg-summary; Write-Host ''; Write-Host 'üí° Test loading a module:' -ForegroundColor Cyan; Write-Host 'Try: load-psrl (loads PSReadLine)' -ForegroundColor Gray; Write-Host 'Try: ls (auto-loads Terminal-Icons)' -ForegroundColor Gray"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üèÉ‚Äç‚ôÇÔ∏è Quick Performance Comparison",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Start-DraculaOptimizationAnalysis.ps1",
        "-TestMode",
        "Quick",
        "-CompareProfiles"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üìö Build Module Documentation (Enhanced)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Build-ModuleDocumentation.ps1",
        "-GenerateTests",
        "-UpdateProjectStructure",
        "-GitRemoteSearch",
        "-CreateBuildManifest"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üìù Build Documentation (Quick)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Build-ModuleDocumentation.ps1",
        "-ModulePath",
        "${workspaceFolder}/PowerShellModules",
        "-GitRemoteSearch"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "üîç Build Documentation with Git Search",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üîç Building documentation with git remote detection...' -ForegroundColor Cyan; . '${workspaceFolder}/Build-ModuleDocumentation.ps1' -GitRemoteSearch -CreateBuildManifest -Verbose; if (Test-Path 'Build-Steps/Manifest-Build-Progress.md.temp') { Write-Host 'üìã Build manifest created - check Build-Steps folder' -ForegroundColor Green }"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      }
    },
    {
      "label": "üß™ Build Documentation + Tests + Tasks",
      "type": "shell", 
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üöÄ Full documentation build with tests and VS Code tasks...' -ForegroundColor Cyan; . '${workspaceFolder}/Build-ModuleDocumentation.ps1' -GenerateTests -UpdateProjectStructure -CreateBuildManifest -GitRemoteSearch -Verbose"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      }
    },
    {
      "label": "üìä Documentation Quality Check",
      "type": "shell",
      "command": "pwsh", 
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üìä Checking documentation quality...' -ForegroundColor Cyan; if (Test-Path './docs') { $docFiles = Get-ChildItem './docs' -Recurse -Filter '*.md'; Write-Host \"üìö Found $($docFiles.Count) documentation files\" -ForegroundColor Green; $docFiles | ForEach-Object { Write-Host \"  ‚úÖ $($_.Name)\" -ForegroundColor Gray } } else { Write-Host '‚ùå No docs folder found' -ForegroundColor Red }; if (Test-Path './Tests') { $testFiles = Get-ChildItem './Tests' -Filter '*.Tests.ps1'; Write-Host \"üß™ Found $($testFiles.Count) test files\" -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è No Tests folder found' -ForegroundColor Yellow }"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "üîÑ Resume Documentation Build",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy", 
        "Bypass",
        "-Command",
        "if (Test-Path 'Build-Steps/Manifest-Build-Progress.md.temp') { Write-Host 'üìã Found existing build manifest' -ForegroundColor Cyan; Get-Content 'Build-Steps/Manifest-Build-Progress.md.temp'; Write-Host ''; Write-Host 'üîÑ Resuming build...' -ForegroundColor Yellow; . '${workspaceFolder}/Build-ModuleDocumentation.ps1' -GitRemoteSearch -CreateBuildManifest } else { Write-Host '‚ùå No build manifest found. Starting fresh build...' -ForegroundColor Red; . '${workspaceFolder}/Build-ModuleDocumentation.ps1' -GitRemoteSearch -CreateBuildManifest }"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      }
    },
    {
      "label": "üíæ Commit All Repositories",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üíæ Committing changes across all repositories...' -ForegroundColor Cyan; $repos = @('${workspaceFolder}', '${workspaceFolder}/PowerShellModules/*'); foreach ($repo in $repos) { if (Test-Path \"$repo/.git\") { Push-Location $repo; try { $status = git status --porcelain; if ($status) { Write-Host \"üìù Changes found in: $repo\" -ForegroundColor Yellow; git add .; git commit -m \"Auto-commit: $(Get-Date -Format 'yyyy-MM-dd HH:mm') - Enhanced documentation and build system\"; Write-Host \"‚úÖ Committed: $repo\" -ForegroundColor Green } else { Write-Host \"‚úÖ No changes in: $repo\" -ForegroundColor Gray } } catch { Write-Host \"‚ùå Error in: $repo - $($_.Exception.Message)\" -ForegroundColor Red } finally { Pop-Location } } }"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      }
    },
    {
      "label": "üöÄ Install Modern Oh My Posh v26+",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Install-ModernOhMyPosh.ps1",
        "-InstallThemes",
        "-UpdateProfiles"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "‚ö° Install Modern Oh My Posh (Scoop)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Install-ModernOhMyPosh.ps1",
        "-UseScoop",
        "-InstallThemes",
        "-UpdateProfiles"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üîÑ Force Reinstall Modern Oh My Posh",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Install-ModernOhMyPosh.ps1",
        "-Force",
        "-InstallThemes",
        "-UpdateProfiles"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üß™ Test Modern Oh My Posh (Quick)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-ModernOhMyPosh.ps1",
        "-TestMode",
        "Quick"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üìä Test Modern Oh My Posh (Comprehensive)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-ModernOhMyPosh.ps1",
        "-TestMode",
        "Comprehensive",
        "-GenerateReport"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üé® Test Modern Oh My Posh Themes",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        ". '${workspaceFolder}/PowerShellModules/UnifiedPowerShellProfile/Scripts/Initialize-ModernOhMyPosh.ps1'; Write-Host 'üé® Testing Dracula theme...' -ForegroundColor Cyan; Initialize-ModernOhMyPosh -Mode 'Dracula' -Verbose; Write-Host ''; Write-Host '‚ö° Testing Performance theme...' -ForegroundColor Yellow; Initialize-ModernOhMyPosh -Mode 'Performance' -Verbose; Write-Host ''; Write-Host 'üßπ Testing Minimal theme...' -ForegroundColor Green; Initialize-ModernOhMyPosh -Mode 'Minimal' -Verbose"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üìã Check Oh My Posh Version",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üîç Oh My Posh Version Information:' -ForegroundColor Cyan; Write-Host ''; if (Get-Command oh-my-posh -ErrorAction SilentlyContinue) { $version = oh-my-posh version; Write-Host \"‚úÖ Version: $version\" -ForegroundColor Green; $major = if ($version -match '(\\d+)\\.') { [int]$matches[1] } else { 0 }; if ($major -ge 26) { Write-Host 'üöÄ Modern version (v26+) detected!' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Legacy version detected. Consider upgrading.' -ForegroundColor Yellow }; Write-Host \"üìÅ Path: $((Get-Command oh-my-posh).Source)\" -ForegroundColor Gray; if ($env:POSH_THEMES_PATH) { Write-Host \"üé® Themes Path: $env:POSH_THEMES_PATH\" -ForegroundColor Gray } } else { Write-Host '‚ùå Oh My Posh not found in PATH' -ForegroundColor Red; Write-Host 'üí° Install with task: üöÄ Install Modern Oh My Posh v26+' -ForegroundColor Yellow }"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üéØ Initialize Modern Dracula Theme",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        ". '${workspaceFolder}/PowerShellModules/UnifiedPowerShellProfile/Scripts/Initialize-ModernOhMyPosh.ps1'; Write-Host 'üßõ‚Äç‚ôÇÔ∏è Initializing Modern Dracula Theme...' -ForegroundColor Magenta; Initialize-ModernOhMyPosh -Mode 'Dracula' -Verbose; Write-Host ''; Write-Host '‚ú® Dracula theme loaded! Your terminal should now show the enhanced prompt.' -ForegroundColor Green; Write-Host 'üí° To make permanent, add to your PowerShell profile.' -ForegroundColor Yellow"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üåê Open Oh My Posh Documentation",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Start-Process 'https://ohmyposh.dev/docs/installation/windows'"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "never",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üßõ‚Äç‚ôÇÔ∏è Install Enhanced Oh My Posh Integration",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Install-EnhancedOhMyPoshIntegration.ps1",
        "-InstallLatest",
        "-UpdateThemes",
        "-TestIntegration"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üîç Test Oh My Posh Integration (Quick)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-OhMyPoshIntegration.ps1",
        "-TestLevel",
        "Quick"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üìä Test Oh My Posh Integration (Comprehensive)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-OhMyPoshIntegration.ps1",
        "-TestLevel",
        "Comprehensive",
        "-GenerateReport",
        "-BenchmarkPerformance"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üé® Initialize Modern Oh My Posh (Dracula)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedPowerShellProfile' -Force; Initialize-ModernOhMyPosh -Mode 'Dracula' -Verbose; Write-Host ''; Write-Host '‚ú® Dracula theme loaded! Your prompt should now show the enhanced Oh My Posh theme.' -ForegroundColor Green"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üîß Validate Oh My Posh Installation",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üîç Oh My Posh Installation Validation' -ForegroundColor Cyan; Write-Host ''; if (Get-Command oh-my-posh -ErrorAction SilentlyContinue) { $version = oh-my-posh version; Write-Host \"‚úÖ Oh My Posh installed: v$version\" -ForegroundColor Green; $versionNumber = [version]($version -replace '[^\\d\\.].*$'); if ($versionNumber.Major -ge 26) { Write-Host 'üöÄ Modern version (v26+) detected - Full features available!' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Legacy version detected - Consider upgrading for full features' -ForegroundColor Yellow } } else { Write-Host '‚ùå Oh My Posh not found' -ForegroundColor Red; Write-Host 'üí° Install with task: üßõ‚Äç‚ôÇÔ∏è Install Enhanced Oh My Posh Integration' -ForegroundColor Yellow }; Write-Host ''; if ($env:POSH_THEMES_PATH) { Write-Host \"üé® Themes path: $env:POSH_THEMES_PATH\" -ForegroundColor Blue; if (Test-Path $env:POSH_THEMES_PATH) { $themes = Get-ChildItem $env:POSH_THEMES_PATH -Filter '*.omp.json'; Write-Host \"üìÅ Found $($themes.Count) themes\" -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Themes path not accessible' -ForegroundColor Yellow } } else { Write-Host '‚ö†Ô∏è POSH_THEMES_PATH environment variable not set' -ForegroundColor Yellow }; Write-Host ''; if (Get-Module UnifiedPowerShellProfile -ListAvailable) { Write-Host '‚úÖ UnifiedPowerShellProfile module available' -ForegroundColor Green; Import-Module UnifiedPowerShellProfile -Force; if (Get-Command Initialize-ModernOhMyPosh -ErrorAction SilentlyContinue) { Write-Host '‚úÖ Initialize-ModernOhMyPosh function available' -ForegroundColor Green } else { Write-Host '‚ö†Ô∏è Initialize-ModernOhMyPosh function missing' -ForegroundColor Yellow } } else { Write-Host '‚ùå UnifiedPowerShellProfile module not found' -ForegroundColor Red }"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üèÜ Ultra-Performance Comparison (Quick)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-UltraPerformanceComparison.ps1",
        "-TestMode",
        "Quick",
        "-GenerateReport"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üìä Ultra-Performance Comparison (Standard)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-UltraPerformanceComparison.ps1",
        "-TestMode",
        "Standard",
        "-Iterations",
        "15",
        "-GenerateReport"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üöÄ Ultra-Performance Comparison (Comprehensive)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-UltraPerformanceComparison.ps1",
        "-TestMode",
        "Comprehensive",
        "-GenerateReport",
        "-IncludeLoremIpsum"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üìù Lorem Ipsum Stress Test",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-UltraPerformanceComparison.ps1",
        "-TestMode",
        "LoremIpsum",
        "-LoremIpsumSize",
        "5000",
        "-GenerateReport"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "‚ö° Test V3 Ultra-Performance Profile",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$env:DRACULA_PERFORMANCE_DEBUG='true'; $env:DRACULA_SHOW_STARTUP='true'; Write-Host 'üßõ‚Äç‚ôÇÔ∏è Testing V3 Ultra-Performance Profile...' -ForegroundColor Cyan; . '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_UltraPerformance_V3.ps1'; Write-Host ''; Write-Host 'üìä V3 Performance Summary:' -ForegroundColor Yellow; dbg-summary; Write-Host ''; Write-Host 'üí° V3 Test commands:' -ForegroundColor Cyan; Write-Host 'Try: test-performance (benchmark V3)' -ForegroundColor Gray; Write-Host 'Try: module-status (check V3 modules)' -ForegroundColor Gray; Write-Host 'Try: clear-cache (clear V3 memory pool)' -ForegroundColor Gray"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üî¨ Test V4 Ultra-Performance Profile",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$env:DRACULA_PERFORMANCE_DEBUG='true'; $env:DRACULA_SHOW_STARTUP='true'; Write-Host 'üßõ‚Äç‚ôÇÔ∏è Testing V4 Ultra-Performance Profile (JIT Optimized)...' -ForegroundColor Magenta; . '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_UltraPerformance_V4.ps1'; Write-Host ''; Write-Host 'üìä V4 Performance Summary:' -ForegroundColor Yellow; dbg-summary; Write-Host ''; Write-Host 'üí° V4 Test commands:' -ForegroundColor Cyan; Write-Host 'Try: test-performance (benchmark V4)' -ForegroundColor Gray; Write-Host 'Try: module-status (check V4 modules with async status)' -ForegroundColor Gray; Write-Host 'Try: clear-cache (clear V4 advanced pool + GC)' -ForegroundColor Gray"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üéØ Compare All Ultra-Performance Versions",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üßõ‚Äç‚ôÇÔ∏è Running comprehensive comparison of all Ultra-Performance versions...' -ForegroundColor Cyan; Write-Host ''; & '${workspaceFolder}/Test-UltraPerformanceComparison.ps1' -TestMode 'Comprehensive' -GenerateReport -IncludeLoremIpsum -LoremIpsumSize 2000; Write-Host ''; Write-Host 'üèÜ Comparison complete! Check the generated HTML report.' -ForegroundColor Green"
      ],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üßõ‚Äç‚ôÇÔ∏è Test Enhanced Dracula Profile",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Test-EnhancedDraculaProfile.ps1"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "isBackground": false
    },
    {
      "label": "üéÆ Launch Enhanced Dracula Profile (Interactive)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-NoExit",
        "-Command",
        "$env:DRACULA_SHOW_STARTUP='true'; . '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula_Enhanced.ps1'"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "isBackground": false
    },
    {
      "label": "üéØ Test Realistic Performance Thresholds (200ms/500ms)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üéØ Testing with Realistic Performance Thresholds' -ForegroundColor Cyan; Write-Host 'üìä Updated Targets: V3/V4=200ms, Original=500ms' -ForegroundColor Yellow; Write-Host ''; $env:DRACULA_PERFORMANCE_DEBUG='true'; & '${workspaceFolder}/Test-UltraPerformanceComparison.ps1' -TestMode 'Quick' -GenerateReport; Write-Host ''; Write-Host 'üìà Performance Analysis with Realistic Expectations:' -ForegroundColor Green; Write-Host '  ‚ö° Excellent: < 200ms' -ForegroundColor Green; Write-Host '  ‚úÖ Very Good: 200-500ms' -ForegroundColor Green; Write-Host '  üëç Good: 500-750ms' -ForegroundColor Yellow; Write-Host '  ‚ö†Ô∏è Needs Optimization: > 750ms' -ForegroundColor Red; Write-Host ''; Write-Host 'üí° Oh My Posh migration may affect initial load times' -ForegroundColor Gray"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "isBackground": false,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üìä Performance Analysis - Oh My Posh Aware",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üìä Performance Analysis - Oh My Posh Migration Aware' -ForegroundColor Cyan; Write-Host ''; Write-Host 'üîç Realistic Performance Expectations:' -ForegroundColor Yellow; Write-Host '  Target for V3/V4: 200ms (down from unrealistic 30-40ms)' -ForegroundColor Green; Write-Host '  Target for Original: 500ms (down from unrealistic 50ms)' -ForegroundColor Green; Write-Host '  Oh My Posh overhead: ~50-100ms additional' -ForegroundColor Gray; Write-Host ''; & '${workspaceFolder}/Start-DraculaOptimizationAnalysis.ps1' -TestMode 'Standard' -GenerateReport; Write-Host ''; Write-Host 'üí° Notes on Updated Thresholds:' -ForegroundColor Cyan; Write-Host '  ‚Ä¢ Sub-200ms is excellent for modern PowerShell profiles' -ForegroundColor Gray; Write-Host '  ‚Ä¢ 200-500ms is very good and realistic with rich features' -ForegroundColor Gray; Write-Host '  ‚Ä¢ Oh My Posh themes add visual value worth the performance cost' -ForegroundColor Gray"
      ],
      "group": {
        "kind": "test",
        "isDefault": false
      },
      "isBackground": false,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üåç Demo Enhanced Dracula Features (User Favorites!)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Demo-EnhancedDraculaFeatures.ps1"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üé® Demo Diacritics Support (‚≠ê User Favorite!)",
      "type": "shell", 
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Demo-EnhancedDraculaFeatures.ps1",
        "-ShowDiacritics"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [],
      "isBackground": false
    },
    {
      "label": "üî¥üü¢ Demo Git Status Indicators (‚≠ê User Favorite!)",
      "type": "shell",
      "command": "pwsh", 
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/Demo-EnhancedDraculaFeatures.ps1",
        "-ShowGitStatus"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [],
      "isBackground": false
    }
  ],
  "inputs": [
    {
      "id": "profileMode",
      "description": "Select profile mode",
      "type": "pickString",
      "options": [
        {
          "label": "üßõ‚Äç‚ôÇÔ∏è Dracula - Enhanced theme with productivity features",
          "value": "Dracula"
        },
        {
          "label": "üöÄ MCP - Model Context Protocol with AI integration", 
          "value": "MCP"
        },
        {
          "label": "‚ö° LazyAdmin - System administration utilities",
          "value": "LazyAdmin"
        },
        {
          "label": "üéØ Minimal - Lightweight setup",
          "value": "Minimal"
        },
        {
          "label": "üõ†Ô∏è Custom - User-defined configuration",
          "value": "Custom"
        }
      ],
      "default": "Dracula"
    },
    {
      "id": "targetHost",
      "type": "promptString",
      "description": "Enter target hostname or IP address"
    },
    {
      "id": "networkRange",
      "type": "promptString", 
      "description": "Enter network range (e.g., 192.168.1.0/24)",
      "default": "192.168.1.0/24"
    }
  ]
}
