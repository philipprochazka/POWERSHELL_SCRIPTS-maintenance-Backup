{
  "version": "2.0.0",
  "options": {
    "shell": {
      "executable": "pwsh.exe",
      "args": ["-NoProfile", "-ExecutionPolicy", "Bypass", "-Command"]
    }
  },
  "tasks": [
    // ===================================================================
    // üìã HELP & NAVIGATION SYSTEM
    // ===================================================================
    {
      "label": "üìã Show All Task Categories",
      "type": "shell",
      "command": "Write-Host 'üéØ PowerShell Development Tasks:' -ForegroundColor Cyan; Write-Host ''; Write-Host 'üßπ CLEANUP:' -ForegroundColor Yellow; Write-Host '  ‚Ä¢ Preview Cleanup (WhatIf)' -ForegroundColor White; Write-Host '  ‚Ä¢ Quick Cleanup (Auto-Commit)' -ForegroundColor White; Write-Host '  ‚Ä¢ Category-Specific Cleanup' -ForegroundColor White; Write-Host ''; Write-Host 'üß™ TESTING:' -ForegroundColor Green; Write-Host '  ‚Ä¢ Unit Tests' -ForegroundColor White; Write-Host '  ‚Ä¢ Integration Tests' -ForegroundColor White; Write-Host '  ‚Ä¢ Performance Tests' -ForegroundColor White; Write-Host '  ‚Ä¢ Full Coverage Report' -ForegroundColor White; Write-Host ''; Write-Host 'üîç ANALYSIS:' -ForegroundColor Magenta; Write-Host '  ‚Ä¢ Script Analyzer (All Files)' -ForegroundColor White; Write-Host '  ‚Ä¢ Current File Analysis' -ForegroundColor White; Write-Host '  ‚Ä¢ Naming Convention Check' -ForegroundColor White; Write-Host '  ‚Ä¢ Branch Consistency Check' -ForegroundColor White; Write-Host ''; Write-Host 'üìö DOCUMENTATION:' -ForegroundColor Blue; Write-Host '  ‚Ä¢ Generate Function Docs' -ForegroundColor White; Write-Host '  ‚Ä¢ Build Project Structure' -ForegroundColor White; Write-Host '  ‚Ä¢ Complete Documentation' -ForegroundColor White; Write-Host ''; Write-Host 'üõ†Ô∏è BUILD & DEPLOY:' -ForegroundColor Red; Write-Host '  ‚Ä¢ Module Manifest Build' -ForegroundColor White; Write-Host '  ‚Ä¢ Syntax Validation' -ForegroundColor White; Write-Host '  ‚Ä¢ Gallery Deployment Prep' -ForegroundColor White; Write-Host ''; Write-Host 'üîÑ REORGANIZATION:' -ForegroundColor Magenta; Write-Host '  ‚Ä¢ Preview UnifiedPowerShell Reorganization' -ForegroundColor White; Write-Host '  ‚Ä¢ Execute UnifiedPowerShell Reorganization' -ForegroundColor White; Write-Host ''; Write-Host 'üåê REMOTE MCP:' -ForegroundColor Cyan; Write-Host '  ‚Ä¢ Test Remote MCP Connections' -ForegroundColor White; Write-Host '  ‚Ä¢ Initialize Remote MCP Environment' -ForegroundColor White; Write-Host '  ‚Ä¢ MCP Security Audit' -ForegroundColor White; Write-Host '  ‚Ä¢ Performance Metrics Collection' -ForegroundColor White; Write-Host '  ‚Ä¢ Health Monitoring' -ForegroundColor White; Write-Host ''; Write-Host 'üìñ Documentation: .vscode/MCP-Remote-Integration-Ruleset.md' -ForegroundColor Gray",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üîÑ Reload VS Code Window",
      "type": "shell", 
      "command": "Write-Host 'üîÑ Reloading VS Code window to refresh tasks...' -ForegroundColor Cyan; Start-Sleep -Seconds 2",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ===================================================================
    // üßπ CLEANUP SYSTEM - Repository Maintenance
    // ===================================================================
    {
      "label": "üßπ Preview Cleanup (WhatIf)",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 10 -WhatIf -Verbose",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üßπ Quick Cleanup (Auto-Commit)",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 15 -AutoCommit -Verbose",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üßπ Cleanup Profiles Only",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 20 -TargetCategories @('Profiles') -AutoCommit -Verbose",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üßπ Cleanup Documentation Only",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 25 -TargetCategories @('Documentation') -AutoCommit -Verbose",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üßπ Full Cleanup (All Categories)",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 50 -TargetCategories @('All') -AutoCommit -Verbose",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ===================================================================
    // üß™ TESTING SYSTEM - Comprehensive Test Suite
    // ===================================================================
    {
      "label": "üß™ Test Cleanup Function",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Invoke-Pester '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile/Tests/Start-ContinuousCleanup.Tests.ps1' -Output Detailed",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üß™ Run Unit Tests",
      "type": "shell",
      "command": "New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; Invoke-Pester '${workspaceFolder}/Tests/Unit/' -Output Detailed -PassThru | Tee-Object -FilePath '${workspaceFolder}/Tests/Reports/unit-test-results.xml'",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üî¨ Run Integration Tests",
      "type": "shell",
      "command": "New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; Invoke-Pester '${workspaceFolder}/Tests/Integration/' -Output Detailed -PassThru | Tee-Object -FilePath '${workspaceFolder}/Tests/Reports/integration-test-results.xml'",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "‚ö° Run Performance Tests",
      "type": "shell",
      "command": "New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; Invoke-Pester '${workspaceFolder}/Tests/Performance/' -Output Detailed -PassThru | Tee-Object -FilePath '${workspaceFolder}/Tests/Reports/performance-test-results.xml'",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üéØ Full Test Suite with Coverage",
      "type": "shell",
      "command": "New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; $Coverage = Invoke-Pester '${workspaceFolder}/Tests/' -CodeCoverage '${workspaceFolder}/**/*.ps1' -Output Detailed -PassThru; $Coverage | Export-Clixml '${workspaceFolder}/Tests/Reports/coverage-report.xml'; Write-Host \"üìä Code Coverage: $($Coverage.CodeCoverage.CoveragePercent)%\" -ForegroundColor Green",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ===================================================================
    // üîç ANALYSIS SYSTEM - Code Quality & Standards
    // ===================================================================
    {
      "label": "üîç Analyze All Files",
      "type": "shell",
      "command": "New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; Invoke-ScriptAnalyzer -Path '${workspaceFolder}' -Settings '${workspaceFolder}/PSScriptAnalyzerSettings.psd1' -Recurse -ReportSummary | Tee-Object -FilePath '${workspaceFolder}/Tests/Reports/scriptanalyzer-report.txt'",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [
        {
          "owner": "PSScriptAnalyzer",
          "fileLocation": ["relative", "${workspaceFolder}"],
          "pattern": {
            "regexp": "^(.*):(\\d+):(\\d+):\\s+(\\w+):\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "severity": 4,
            "message": 5
          }
        }
      ]
    },
    {
      "label": "üîç Analyze Current File",
      "type": "shell",
      "command": "Invoke-ScriptAnalyzer -Path '${file}' -Settings '${workspaceFolder}/PSScriptAnalyzerSettings.psd1' -ReportSummary",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [
        {
          "owner": "PSScriptAnalyzer",
          "fileLocation": ["relative", "${workspaceFolder}"],
          "pattern": {
            "regexp": "^(.*):(\\d+):(\\d+):\\s+(\\w+):\\s+(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "severity": 4,
            "message": 5
          }
        }
      ]
    },
    {
      "label": "üö´ Check Naming Violations",
      "type": "shell",
      "command": "Get-ChildItem -Path '${workspaceFolder}' -Filter '*.ps1' -Recurse | ForEach-Object { $Content = Get-Content $_.FullName -Raw; if ($Content -match 'function\\s+(Setup-|Create-)\\w+') { Write-Host \"‚ùå NAMING VIOLATION in $($_.Name): Found prohibited function prefix\" -ForegroundColor Red; $Matches[0] } else { Write-Host \"‚úÖ $($_.Name): No naming violations\" -ForegroundColor Green } }",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üîÄ Check Branch Consistency",
      "type": "shell",
      "command": "Write-Host 'üîç Checking branch consistency across repository...' -ForegroundColor Cyan; Write-Host ''; $CurrentBranch = (git branch --show-current); $DefaultBranch = (git ls-remote --symref powershell HEAD | Select-String 'ref: refs/heads/(.+)' | ForEach-Object { $_.Matches[0].Groups[1].Value }); Write-Host \"Current Branch: $CurrentBranch\" -ForegroundColor $(if($CurrentBranch -eq $DefaultBranch){'Green'}else{'Yellow'}); Write-Host \"Default Branch: $DefaultBranch\" -ForegroundColor Green; Write-Host ''; Write-Host 'Scanning for branch references in files...' -ForegroundColor Yellow; $IncorrectRefs = @(); Get-ChildItem -Path '${workspaceFolder}' -Include '*.md','*.yml','*.yaml','*.ps1' -Recurse | ForEach-Object { $Content = Get-Content $_.FullName -Raw; if ($Content -match 'origin\\s+main|git.*main|branch.*main' -and $_.FullName -notlike '*SSH*') { $IncorrectRefs += $_.FullName; Write-Host \"‚ö†Ô∏è  Found 'main' reference in: $($_.Name)\" -ForegroundColor Yellow } }; if ($IncorrectRefs.Count -eq 0) { Write-Host '‚úÖ All branch references are consistent!' -ForegroundColor Green } else { Write-Host ''; Write-Host \"‚ùå Found $($IncorrectRefs.Count) files with incorrect branch references\" -ForegroundColor Red; Write-Host 'Consider updating these files to use the correct default branch.' -ForegroundColor Yellow }",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "‚úÖ Validate PowerShell Syntax",
      "type": "shell",
      "command": "Get-ChildItem -Path '${workspaceFolder}' -Filter '*.ps1' -Recurse | ForEach-Object { Write-Host \"Checking $($_.Name)...\" -ForegroundColor Cyan; try { $null = [System.Management.Automation.Language.Parser]::ParseFile($_.FullName, [ref]$null, [ref]$null); Write-Host \"‚úÖ $($_.Name): Syntax OK\" -ForegroundColor Green } catch { Write-Host \"‚ùå $($_.Name): Syntax Error - $_\" -ForegroundColor Red } }",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ===================================================================
    // üìö DOCUMENTATION SYSTEM - Automated Documentation
    // ===================================================================
    {
      "label": "üìö Open Function Documentation",
      "type": "shell", 
      "command": "Write-Host 'üìñ Opening Start-ContinuousCleanup documentation...' -ForegroundColor Cyan; code '${workspaceFolder}/docs/functions/Start-ContinuousCleanup.md'",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always", 
        "focus": false,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üìö Build Complete Documentation",
      "type": "shell",
      "command": "$Functions = Get-ChildItem -Path '${workspaceFolder}' -Filter '*.ps1' -Recurse | ForEach-Object { Select-String -Path $_.FullName -Pattern '^function\\s+([\\w-]+)' | ForEach-Object { $_.Matches[0].Groups[1].Value } }; Write-Host 'üìñ Found Functions:' -ForegroundColor Cyan; $Functions | ForEach-Object { Write-Host \"  - $_\" -ForegroundColor Green }; Write-Host 'üìù Documentation build complete!' -ForegroundColor Green",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üìñ Generate Function Template",
      "type": "shell",
      "command": "${input:functionName}",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üèóÔ∏è Build Project Structure",
      "type": "shell",
      "command": "tree '${workspaceFolder}' /F /A > '${workspaceFolder}/docs/folder-tree.md'; Write-Host 'üìÅ Project structure documentation generated!' -ForegroundColor Green; code '${workspaceFolder}/docs/folder-tree.md'",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ===================================================================
    // üõ†Ô∏è BUILD & DEPLOY SYSTEM - Module Development
    // ===================================================================
    {
      "label": "üî® Build Module Manifest",
      "type": "shell",
      "command": "Write-Host 'üî® Building PowerShell module manifest...' -ForegroundColor Cyan; $ModulePath = '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile'; if (Test-Path \"$ModulePath/UnifiedMCPProfile.psd1\") { Test-ModuleManifest \"$ModulePath/UnifiedMCPProfile.psd1\" } else { Write-Host '‚ùå Module manifest not found!' -ForegroundColor Red }",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üöÄ Deploy Preparation (Dry Run)",
      "type": "shell",
      "command": "Write-Host 'üöÄ PowerShell Gallery deployment preparation...' -ForegroundColor Cyan; Write-Host 'üìã Module validation checklist:' -ForegroundColor Yellow; Write-Host '  ‚úÖ Manifest validation' -ForegroundColor Green; Write-Host '  ‚úÖ Function exports' -ForegroundColor Green; Write-Host '  ‚úÖ Documentation complete' -ForegroundColor Green; Write-Host '  ‚úÖ Tests passing' -ForegroundColor Green; Write-Host 'üéØ Ready for gallery deployment!' -ForegroundColor Green",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üîÑ Preview UnifiedPowerShell Reorganization",
      "type": "shell",
      "command": "& '${workspaceFolder}/Build-UnifiedPowerShellReorganization.ps1' -WhatIf",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üîß Execute UnifiedPowerShell Reorganization",
      "type": "shell",
      "command": "& '${workspaceFolder}/Build-UnifiedPowerShellReorganization.ps1' -AutoCommit",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    // ===================================================================
    // üåê REMOTE MCP INTEGRATION - Server Management & Testing
    // ===================================================================
    {
      "label": "üåê Test Remote MCP Connections",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; if (Get-Command Test-AllRemoteMCPServers -ErrorAction SilentlyContinue) { Test-AllRemoteMCPServers -Environment ${input:environment} -GenerateReport -Verbose } else { Write-Host '‚ö†Ô∏è Remote MCP functions not available. Please implement Test-AllRemoteMCPServers function.' -ForegroundColor Yellow }",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üîß Initialize Remote MCP Environment",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; if (Get-Command Initialize-RemoteMCPEnvironment -ErrorAction SilentlyContinue) { Initialize-RemoteMCPEnvironment -Environment ${input:environment} -Verbose } else { Write-Host '‚ö†Ô∏è Creating remote MCP configuration template...' -ForegroundColor Yellow; New-Item -Path '${workspaceFolder}/.mcp/remote-mcp-config.json' -ItemType File -Force -Value (Get-Content '${workspaceFolder}/.vscode/MCP-Remote-Integration-Ruleset.md' | Select-String -Pattern '\"environments\"' -A 50 | Out-String) }",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üîç MCP Security Audit",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; if (Get-Command Invoke-MCPSecurityAudit -ErrorAction SilentlyContinue) { Invoke-MCPSecurityAudit -Environment ${input:environment} -Verbose } else { Write-Host 'üîí Security audit checklist:' -ForegroundColor Cyan; Write-Host '  ‚úÖ Check HTTPS enforcement' -ForegroundColor Green; Write-Host '  ‚úÖ Validate token security' -ForegroundColor Green; Write-Host '  ‚úÖ Review access controls' -ForegroundColor Green; Write-Host '  ‚úÖ Audit authentication methods' -ForegroundColor Green; Write-Host 'üìÑ Manual security review required' -ForegroundColor Yellow }",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üìä Collect MCP Performance Metrics",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; if (Get-Command Collect-MCPPerformanceMetrics -ErrorAction SilentlyContinue) { Collect-MCPPerformanceMetrics -SampleDurationMinutes 5 -Verbose } else { Write-Host 'üìà Performance metrics collection:' -ForegroundColor Cyan; Write-Host '  üîÑ Response time monitoring' -ForegroundColor White; Write-Host '  üìä Success rate calculation' -ForegroundColor White; Write-Host '  ‚ùå Error rate tracking' -ForegroundColor White; Write-Host '  üìÑ Metrics report generation' -ForegroundColor White; Write-Host '‚ö†Ô∏è Implement Collect-MCPPerformanceMetrics function for full metrics' -ForegroundColor Yellow }",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "üîÑ Start MCP Health Monitoring",
      "type": "shell",
      "command": "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; if (Get-Command Start-MCPHealthMonitoring -ErrorAction SilentlyContinue) { Start-MCPHealthMonitoring -IntervalMinutes 2 -Environment ${input:environment} } else { Write-Host 'üíì MCP Health Monitoring:' -ForegroundColor Cyan; Write-Host '  üîç Continuous server health checks' -ForegroundColor White; Write-Host '  ‚ö†Ô∏è Automatic issue detection' -ForegroundColor White; Write-Host '  üìß Alert notifications' -ForegroundColor White; Write-Host '  üìä Health status dashboard' -ForegroundColor White; Write-Host '‚ö†Ô∏è Implement Start-MCPHealthMonitoring function for monitoring' -ForegroundColor Yellow }",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [],
      "isBackground": true
    },
    {
      "label": "üìã Open MCP Remote Integration Ruleset",
      "type": "shell",
      "command": "Write-Host 'üìñ Opening Remote MCP Integration Ruleset...' -ForegroundColor Cyan; code '${workspaceFolder}/.vscode/MCP-Remote-Integration-Ruleset.md'",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "functionName",
      "description": "Function name for documentation generation",
      "default": "New-Function",
      "type": "promptString"
    },
    {
      "id": "environment",
      "description": "Target environment for MCP operations",
      "default": "development",
      "type": "pickString",
      "options": [
        {
          "label": "Development",
          "value": "development"
        },
        {
          "label": "Staging", 
          "value": "staging"
        },
        {
          "label": "Production",
          "value": "production"
        }
      ]
    }
  ]
}
