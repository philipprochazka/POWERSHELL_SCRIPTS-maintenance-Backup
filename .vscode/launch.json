{
  "version": "0.2.0",
  "configurations": [
    // ===================================================================
    // üìã QUICK ACCESS - Most Common Development Tasks
    // ===================================================================
    {
      "name": "üßπ Quick Cleanup Preview",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 10 -WhatIf -Verbose"
      ]
    },
    {
      "name": "üß™ Run Quick Tests",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Invoke-Pester '${workspaceFolder}/Tests/Unit/' -Output Detailed"
      ]
    },
    {
      "name": "üîç Analyze Current File",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Invoke-ScriptAnalyzer -Path '${file}' -Settings '${workspaceFolder}/PSScriptAnalyzerSettings.psd1' -ReportSummary"
      ]
    },

    // ===================================================================
    // üßπ CLEANUP SYSTEM - Repository Maintenance
    // ===================================================================
    {
      "name": "üßπ Cleanup: Preview Mode",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:CLEANUP_DEBUG='true'; Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 10 -WhatIf -Verbose"
      ]
    },
    {
      "name": "üßπ Cleanup: Auto-Commit Mode",
      "type": "PowerShell", 
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:CLEANUP_DEBUG='true'; Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 15 -AutoCommit -Verbose"
      ]
    },
    {
      "name": "üßπ Cleanup: Profiles Only",
      "type": "PowerShell",
      "request": "launch", 
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 20 -TargetCategories @('Profiles') -AutoCommit -Verbose"
      ]
    },
    {
      "name": "üßπ Cleanup: Documentation Only", 
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Start-ContinuousCleanup -MaxFilesPerRun 25 -TargetCategories @('Documentation') -AutoCommit -Verbose"
      ]
    },

    // ===================================================================
    // üß™ TESTING SYSTEM - Comprehensive Test Suite
    // ===================================================================
    {
      "name": "üß™ Test: Cleanup Function",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:PESTER_DEBUG='true'; Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Invoke-Pester '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile/Tests/Start-ContinuousCleanup.Tests.ps1' -Output Detailed"
      ]
    },
    {
      "name": "üß™ Test: Unit Tests",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:PESTER_DEBUG='true'; New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; Invoke-Pester '${workspaceFolder}/Tests/Unit/' -Output Detailed -PassThru"
      ]
    },
    {
      "name": "üî¨ Test: Integration Tests",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:PESTER_DEBUG='true'; New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; Invoke-Pester '${workspaceFolder}/Tests/Integration/' -Output Detailed -PassThru"
      ]
    },
    {
      "name": "‚ö° Test: Performance Tests",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:PESTER_DEBUG='true'; $env:PERFORMANCE_DEBUG='true'; New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; Invoke-Pester '${workspaceFolder}/Tests/Performance/' -Output Detailed -PassThru"
      ]
    },
    {
      "name": "üéØ Test: Full Suite with Coverage",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:PESTER_DEBUG='true'; $env:COVERAGE_DEBUG='true'; New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; $Coverage = Invoke-Pester '${workspaceFolder}/Tests/' -CodeCoverage '${workspaceFolder}/**/*.ps1' -Output Detailed -PassThru; $Coverage | Export-Clixml '${workspaceFolder}/Tests/Reports/coverage-report.xml'; Write-Host \"üìä Code Coverage: $($Coverage.CodeCoverage.CoveragePercent)%\" -ForegroundColor Green"
      ]
    },

    // ===================================================================
    // üîç ANALYSIS SYSTEM - Code Quality & Standards  
    // ===================================================================
    {
      "name": "üîç Analysis: All Files",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:SCRIPTANALYZER_DEBUG='true'; New-Item -Path '${workspaceFolder}/Tests/Reports' -ItemType Directory -Force; Invoke-ScriptAnalyzer -Path '${workspaceFolder}' -Settings '${workspaceFolder}/PSScriptAnalyzerSettings.psd1' -Recurse -ReportSummary"
      ]
    },
    {
      "name": "üîç Analysis: Current File Debug",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:SCRIPTANALYZER_DEBUG='true'; Write-Host 'Analyzing: ${file}' -ForegroundColor Cyan; Invoke-ScriptAnalyzer -Path '${file}' -Settings '${workspaceFolder}/PSScriptAnalyzerSettings.psd1' -ReportSummary"
      ]
    },
    {
      "name": "üö´ Analysis: Naming Violations",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:NAMING_CHECK_DEBUG='true'; Get-ChildItem -Path '${workspaceFolder}' -Filter '*.ps1' -Recurse | ForEach-Object { $Content = Get-Content $_.FullName -Raw; if ($Content -match 'function\\s+(Setup-|Create-)\\w+') { Write-Host \"‚ùå NAMING VIOLATION in $($_.Name): Found prohibited function prefix\" -ForegroundColor Red; $Matches[0] } else { Write-Host \"‚úÖ $($_.Name): No naming violations\" -ForegroundColor Green } }"
      ]
    },
    {
      "name": "‚úÖ Analysis: Syntax Validation",
      "type": "PowerShell", 
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:SYNTAX_CHECK_DEBUG='true'; Get-ChildItem -Path '${workspaceFolder}' -Filter '*.ps1' -Recurse | ForEach-Object { Write-Host \"Checking $($_.Name)...\" -ForegroundColor Cyan; try { $null = [System.Management.Automation.Language.Parser]::ParseFile($_.FullName, [ref]$null, [ref]$null); Write-Host \"‚úÖ $($_.Name): Syntax OK\" -ForegroundColor Green } catch { Write-Host \"‚ùå $($_.Name): Syntax Error - $_\" -ForegroundColor Red } }"
      ]
    },
    {
      "name": "üîÄ Analysis: Branch Consistency",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:BRANCH_CHECK_DEBUG='true'; Write-Host 'üîç Checking branch consistency across repository...' -ForegroundColor Cyan; Write-Host ''; $CurrentBranch = (git branch --show-current); $DefaultBranch = (git ls-remote --symref origin HEAD | Select-String 'ref: refs/heads/(.+)' | ForEach-Object { $_.Matches[0].Groups[1].Value }); Write-Host \"Current Branch: $CurrentBranch\" -ForegroundColor $(if($CurrentBranch -eq $DefaultBranch){'Green'}else{'Yellow'}); Write-Host \"Default Branch: $DefaultBranch\" -ForegroundColor Green; Write-Host ''; Write-Host 'Scanning for branch references in files...' -ForegroundColor Yellow; $IncorrectRefs = @(); Get-ChildItem -Path '${workspaceFolder}' -Include '*.md','*.yml','*.yaml','*.ps1' -Recurse | ForEach-Object { $Content = Get-Content $_.FullName -Raw; if ($Content -match 'origin\\s+main|git.*main|branch.*main' -and $_.FullName -notlike '*SSH*') { $IncorrectRefs += $_.FullName; Write-Host \"‚ö†Ô∏è  Found 'main' reference in: $($_.Name)\" -ForegroundColor Yellow } }; if ($IncorrectRefs.Count -eq 0) { Write-Host '‚úÖ All branch references are consistent!' -ForegroundColor Green } else { Write-Host ''; Write-Host \"‚ùå Found $($IncorrectRefs.Count) files with incorrect branch references\" -ForegroundColor Red; Write-Host 'Consider updating these files to use the correct default branch.' -ForegroundColor Yellow }"
      ]
    },

    // ===================================================================
    // üõ†Ô∏è BUILD & DEPLOY SYSTEM - Module Development
    // ===================================================================
    {
      "name": "üî® Build: Module Manifest",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:BUILD_DEBUG='true'; Write-Host 'üî® Building PowerShell module manifest...' -ForegroundColor Cyan; $ModulePath = '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile'; if (Test-Path \"$ModulePath/UnifiedMCPProfile.psd1\") { Test-ModuleManifest \"$ModulePath/UnifiedMCPProfile.psd1\" } else { Write-Host '‚ùå Module manifest not found!' -ForegroundColor Red }"
      ]
    },
    {
      "name": "üöÄ Build: Deployment Check",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "$env:DEPLOY_DEBUG='true'; Write-Host 'üöÄ PowerShell Gallery deployment preparation...' -ForegroundColor Cyan; Write-Host 'üìã Module validation checklist:' -ForegroundColor Yellow; Write-Host '  ‚úÖ Manifest validation' -ForegroundColor Green; Write-Host '  ‚úÖ Function exports' -ForegroundColor Green; Write-Host '  ‚úÖ Documentation complete' -ForegroundColor Green; Write-Host '  ‚úÖ Tests passing' -ForegroundColor Green; Write-Host 'üéØ Ready for gallery deployment!' -ForegroundColor Green"
      ]
    },

    // ===================================================================
    // üöÄ PROFILE SYSTEM - Legacy Configurations (Simplified)
    // ===================================================================
    {
      "name": "üßõ‚Äç‚ôÇÔ∏è Dracula Profile",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-NoLogo",
        "-Command", 
        "$env:PROFILE_DEBUG='true'; . '${workspaceFolder}/Microsoft.PowerShell_profile_Dracula.ps1'"
      ]
    },
    {
      "name": "üöÄ MCP Profile",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-NoLogo",
        "-Command", 
        "$env:PROFILE_DEBUG='true'; . '${workspaceFolder}/Microsoft.PowerShell_profile_MCP.ps1'"
      ]
    },
    {
      "name": "üéØ Unified Profile",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-NoLogo",
        "-Command", 
        "$env:PROFILE_DEBUG='true'; . '${workspaceFolder}/Install-UnifiedProfile.ps1'"
      ]
    },

    // ===================================================================
    // üåê REMOTE MCP INTEGRATION - Debug & Testing
    // ===================================================================
    {
      "name": "üî¨ Debug Remote MCP Connection",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; if (Get-Command Test-AllRemoteMCPServers -ErrorAction SilentlyContinue) { Test-AllRemoteMCPServers -Environment development -GenerateReport -Verbose } else { Write-Host '‚ö†Ô∏è Implementing Remote MCP test framework...' -ForegroundColor Yellow; Write-Host 'üìñ See: ${workspaceFolder}/.vscode/MCP-Remote-Integration-Ruleset.md' -ForegroundColor Cyan }"
      ]
    },
    {
      "name": "üß™ MCP Health Monitoring Session",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Write-Host 'üíì Starting MCP Health Monitoring...' -ForegroundColor Cyan; Write-Host 'Press Ctrl+C to stop monitoring' -ForegroundColor Yellow; if (Get-Command Start-MCPHealthMonitoring -ErrorAction SilentlyContinue) { Start-MCPHealthMonitoring -IntervalMinutes 2 } else { Write-Host 'üìã Manual health check commands:' -ForegroundColor Blue; Write-Host '  Test-AllRemoteMCPServers -Environment development' -ForegroundColor White; Write-Host '  Show-MCPStatus -Detailed' -ForegroundColor White }"
      ]
    },
    {
      "name": "üîí MCP Security Audit",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Write-Host 'üîí MCP Security Audit Starting...' -ForegroundColor Yellow; if (Get-Command Invoke-MCPSecurityAudit -ErrorAction SilentlyContinue) { Invoke-MCPSecurityAudit -Environment development -Verbose } else { Write-Host 'üìã Security Checklist:' -ForegroundColor Cyan; Write-Host '  ‚úÖ HTTPS enforcement' -ForegroundColor Green; Write-Host '  ‚úÖ Token security' -ForegroundColor Green; Write-Host '  ‚úÖ Access controls' -ForegroundColor Green; Write-Host '  ‚úÖ Certificate validation' -ForegroundColor Green; Write-Host 'üìÑ Manual audit required - see ruleset' -ForegroundColor Yellow }"
      ]
    },
    {
      "name": "üìä MCP Performance Analysis",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Write-Host 'üìä MCP Performance Analysis...' -ForegroundColor Magenta; if (Get-Command Collect-MCPPerformanceMetrics -ErrorAction SilentlyContinue) { Collect-MCPPerformanceMetrics -SampleDurationMinutes 5 -Verbose } else { Write-Host 'üìà Performance metrics to collect:' -ForegroundColor Blue; Write-Host '  üîÑ Response times' -ForegroundColor White; Write-Host '  üìä Success rates' -ForegroundColor White; Write-Host '  ‚ùå Error rates' -ForegroundColor White; Write-Host '  üìÑ Detailed reports' -ForegroundColor White }"
      ]
    },
    {
      "name": "üîß Initialize Remote MCP Environment",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Write-Host 'üîß Initializing Remote MCP Environment...' -ForegroundColor Green; if (Get-Command Initialize-RemoteMCPEnvironment -ErrorAction SilentlyContinue) { Initialize-RemoteMCPEnvironment -Environment development -Force -Verbose } else { Write-Host 'üìã Setup steps:' -ForegroundColor Cyan; Write-Host '  1. Create remote-mcp-config.json' -ForegroundColor White; Write-Host '  2. Set environment variables' -ForegroundColor White; Write-Host '  3. Configure authentication' -ForegroundColor White; Write-Host '  4. Test connections' -ForegroundColor White; Write-Host 'üìñ See MCP Remote Integration Ruleset for details' -ForegroundColor Yellow }"
      ]
    },
    {
      "name": "üöÄ Interactive MCP Development",
      "type": "PowerShell",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "createTemporaryIntegratedConsole": true,
      "args": [
        "-ExecutionPolicy", "Bypass",
        "-NoExit",
        "-Command", 
        "Import-Module '${workspaceFolder}/PowerShellModules/UnifiedMCPProfile' -Force; Write-Host 'üöÄ Interactive MCP Development Session' -ForegroundColor Cyan; Write-Host 'üìñ Available commands:' -ForegroundColor Blue; Write-Host '  Show-MCPStatus      # Check MCP environment' -ForegroundColor White; Write-Host '  Initialize-MCPEnvironment # Setup local MCP' -ForegroundColor White; Write-Host '  Get-MCPConfiguration # View current config' -ForegroundColor White; Write-Host 'üìù Remote MCP Ruleset: .vscode/MCP-Remote-Integration-Ruleset.md' -ForegroundColor Gray; Write-Host ''"
      ]
    }
  ]
}
