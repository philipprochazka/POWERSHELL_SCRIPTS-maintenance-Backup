#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Initialize Repository-Local PowerShell Module System
    
.DESCRIPTION
    Configures PowerShell to use modules from the repository-local PowerShellModules directory
    instead of the standard user modules directory. This ensures all modules are contained
    within the repository for "Linux-ized" Windows development.
    
.PARAMETER RepositoryRoot
    Root path of the PowerShell repository. Defaults to current script location.
    
.PARAMETER UpdateProfile
    Update PowerShell profiles to use repository-local modules
    
.PARAMETER Force
    Force overwrite existing configurations
    
.EXAMPLE
    .\Initialize-RepositoryLocalModules.ps1 -UpdateProfile
    
.EXAMPLE
    .\Initialize-RepositoryLocalModules.ps1 -RepositoryRoot "C:\backup\Powershell" -Force
#>

[CmdletBinding()]
param(
    [Parameter()]
    [string]$RepositoryRoot = $PSScriptRoot,
    
    [Parameter()]
    [switch]$UpdateProfile,
    
    [Parameter()]
    [switch]$Force
)

$ErrorActionPreference = "Stop"

# Repository configuration
$script:RepoRoot = $RepositoryRoot
$script:LocalModulesPath = Join-Path $script:RepoRoot "PowerShellModules"
$script:ProfilesPath = Join-Path $script:RepoRoot "Profiles"

Write-Host "üîß Initializing Repository-Local Module System..." -ForegroundColor Cyan
Write-Host "üìÇ Repository Root: $script:RepoRoot" -ForegroundColor Gray
Write-Host "üì¶ Local Modules: $script:LocalModulesPath" -ForegroundColor Gray

function Write-StatusLog {
    param(
        [string]$Message,
        [ValidateSet('Info', 'Success', 'Warning', 'Error')]
        [string]$Level = 'Info'
    )
    
    $colors = @{
        'Info'    = 'White'
        'Success' = 'Green'
        'Warning' = 'Yellow'
        'Error'   = 'Red'
    }
    
    $icons = @{
        'Info'    = '‚ÑπÔ∏è'
        'Success' = '‚úÖ'
        'Warning' = '‚ö†Ô∏è'
        'Error'   = '‚ùå'
    }
    
    Write-Host "$($icons[$Level]) $Message" -ForegroundColor $colors[$Level]
}

function Initialize-LocalModulePath {
    <#
    .SYNOPSIS
        Configure PSModulePath to include repository-local modules
    #>
    Write-StatusLog "üõ†Ô∏è Configuring local module path..." -Level Info
    
    # Ensure local modules directory exists
    if (-not (Test-Path $script:LocalModulesPath)) {
        New-Item -Path $script:LocalModulesPath -ItemType Directory -Force | Out-Null
        Write-StatusLog "üìÅ Created local modules directory: $script:LocalModulesPath" -Level Success
    }
    
    # Add repository modules to PSModulePath if not already present
    $currentModulePath = $env:PSModulePath -split [IO.Path]::PathSeparator
    if ($script:LocalModulesPath -notin $currentModulePath) {
        $env:PSModulePath = "$script:LocalModulesPath$([IO.Path]::PathSeparator)$env:PSModulePath"
        Write-StatusLog "üì¶ Added repository modules to PSModulePath" -Level Success
    } else {
        Write-StatusLog "üì¶ Repository modules already in PSModulePath" -Level Info
    }
    
    # Display current module paths
    Write-StatusLog "üìã Current PSModulePath:" -Level Info
    $env:PSModulePath -split [IO.Path]::PathSeparator | ForEach-Object {
        $indicator = if ($_ -eq $script:LocalModulesPath) {
            "üéØ" 
        } else {
            "üìÇ" 
        }
        Write-Host "   $indicator $_" -ForegroundColor Gray
    }
}

function Test-LocalModules {
    <#
    .SYNOPSIS
        Test that repository-local modules are accessible
    #>
    Write-StatusLog "üîç Testing local module availability..." -Level Info
    
    $foundModules = @()
    if (Test-Path $script:LocalModulesPath) {
        $foundModules = Get-ChildItem -Path $script:LocalModulesPath -Directory | 
        Where-Object { Test-Path (Join-Path $_.FullName "*.psd1") -or Test-Path (Join-Path $_.FullName "*.psm1") }
    }
    
    if ($foundModules.Count -gt 0) {
        Write-StatusLog "üì¶ Found $($foundModules.Count) local modules:" -Level Success
        $foundModules | ForEach-Object {
            Write-Host "   üìã $($_.Name)" -ForegroundColor Green
        }
    } else {
        Write-StatusLog "‚ö†Ô∏è No modules found in local directory" -Level Warning
    }
    
    return $foundModules
}

function Build-RepositoryLocalProfileBootstrap {
    <#
    .SYNOPSIS
        Create a profile bootstrap script for repository-local modules
    #>
    Write-StatusLog "üìù Creating repository-local profile bootstrap..." -Level Info
    
    $bootstrapContent = @"
#!/usr/bin/env pwsh
# Repository-Local PowerShell Module Bootstrap
# Auto-generated by Initialize-RepositoryLocalModules.ps1

# Repository configuration
`$script:RepositoryRoot = "$script:RepoRoot"
`$script:LocalModulesPath = "$script:LocalModulesPath"

# Add repository modules to PSModulePath
if (`$script:LocalModulesPath -notin (`$env:PSModulePath -split [IO.Path]::PathSeparator)) {
    `$env:PSModulePath = "`$script:LocalModulesPath$([IO.Path]::PathSeparator)`$env:PSModulePath"
}

# Function to import repository-local modules
function Import-RepositoryModule {
    param(
        [Parameter(Mandatory)]
        [string]`$ModuleName,
        
        [Parameter()]
        [switch]`$Force
    )
    
    `$localModulePath = Join-Path `$script:LocalModulesPath `$ModuleName
    if (Test-Path `$localModulePath) {
        Import-Module `$localModulePath -Force:`$Force -Global
        Write-Host "‚úÖ Imported repository module: `$ModuleName" -ForegroundColor Green
    } else {
        # Fall back to standard module loading
        Import-Module `$ModuleName -Force:`$Force -Global
        Write-Host "üì¶ Imported standard module: `$ModuleName" -ForegroundColor Yellow
    }
}

# Function to get available repository modules
function Get-RepositoryModules {
    if (Test-Path `$script:LocalModulesPath) {
        Get-ChildItem -Path `$script:LocalModulesPath -Directory | 
            Where-Object { Test-Path (Join-Path `$_.FullName "*.psd1") -or Test-Path (Join-Path `$_.FullName "*.psm1") } |
            Select-Object Name, FullName
    }
}

# Export repository module functions
Export-ModuleMember -Function Import-RepositoryModule, Get-RepositoryModules

Write-Host "üéØ Repository-local module system initialized" -ForegroundColor Cyan
Write-Host "üìÇ Repository Root: `$script:RepositoryRoot" -ForegroundColor Gray
Write-Host "üì¶ Local Modules: `$script:LocalModulesPath" -ForegroundColor Gray
"@

    $bootstrapPath = Join-Path $script:RepoRoot "Initialize-RepositoryModules.ps1"
    $bootstrapContent | Set-Content -Path $bootstrapPath -Encoding UTF8
    Write-StatusLog "üìÑ Created bootstrap script: $bootstrapPath" -Level Success
    
    return $bootstrapPath
}

function Update-InstallationScripts {
    <#
    .SYNOPSIS
        Update installation scripts to use repository-local modules
    #>
    Write-StatusLog "üîÑ Updating installation scripts for repository-local modules..." -Level Info
    
    # Find installation scripts that reference user module directories
    $installScripts = @(
        Join-Path $script:RepoRoot "Theme\UnifiedPowerShellProfile\Install-UnifiedProfile.ps1"
        Join-Path $script:RepoRoot "Theme\Install-DraculaProfile.ps1"
        Join-Path $script:RepoRoot "Install-UnifiedProfile.ps1"
        Join-Path $script:RepoRoot "Install-UnifiedProfileSystem.ps1"
    ) | Where-Object { Test-Path $_ }
    
    foreach ($scriptPath in $installScripts) {
        Write-StatusLog "üîß Processing: $(Split-Path $scriptPath -Leaf)" -Level Info
        
        # Create backup
        $backupPath = "$scriptPath.backup"
        if (-not (Test-Path $backupPath) -or $Force) {
            Copy-Item $scriptPath $backupPath -Force
        }
        
        # Read script content
        $content = Get-Content $scriptPath -Raw
        
        # Replace user modules path references with repository-local paths
        $updatedContent = $content -replace 
        '\[Environment\]::GetFolderPath\(''MyDocuments''\)\s*\+\s*"\\PowerShell\\Modules"',
        "`"$script:LocalModulesPath`""
        
        $updatedContent = $updatedContent -replace 
        'Join-Path\s+\(\[Environment\]::GetFolderPath\(''MyDocuments''\)\)\s+"PowerShell\\Modules"',
        "`"$script:LocalModulesPath`""
        
        # Write updated content
        if ($updatedContent -ne $content) {
            $updatedContent | Set-Content -Path $scriptPath -Encoding UTF8
            Write-StatusLog "‚úÖ Updated: $(Split-Path $scriptPath -Leaf)" -Level Success
        } else {
            Write-StatusLog "‚ÑπÔ∏è No changes needed: $(Split-Path $scriptPath -Leaf)" -Level Info
        }
    }
}

function New-RepositoryLocalProfile {
    <#
    .SYNOPSIS
        Create a repository-local PowerShell profile
    #>
    param(
        [string]$ProfileType = "Microsoft.PowerShell_profile"
    )
    
    Write-StatusLog "üìù Creating repository-local profile: $ProfileType" -Level Info
    
    $profileContent = @"
#!/usr/bin/env pwsh
# Repository-Local PowerShell Profile
# Generated by Initialize-RepositoryLocalModules.ps1

# Initialize repository-local module system
`$repositoryBootstrap = Join-Path "$script:RepoRoot" "Initialize-RepositoryModules.ps1"
if (Test-Path `$repositoryBootstrap) {
    . `$repositoryBootstrap
}

# Import common repository modules
try {
    Import-RepositoryModule "UnifiedMCPProfile" -Force
} catch {
    Write-Warning "Could not import UnifiedMCPProfile: `$(`$_.Exception.Message)"
}

try {
    Import-RepositoryModule "UnifiedPowerShellProfile" -Force
} catch {
    Write-Warning "Could not import UnifiedPowerShellProfile: `$(`$_.Exception.Message)"
}

# Display repository status
Write-Host "üéØ Repository-Local PowerShell Environment" -ForegroundColor Cyan
Write-Host "üìÇ Repository: $script:RepoRoot" -ForegroundColor Gray
Write-Host "üì¶ Available Modules:" -ForegroundColor Gray
Get-RepositoryModules | ForEach-Object {
    Write-Host "   üìã `$(`$_.Name)" -ForegroundColor Green
}
"@

    $profilePath = Join-Path $script:RepoRoot "$ProfileType.ps1"
    $profileContent | Set-Content -Path $profilePath -Encoding UTF8
    Write-StatusLog "üìÑ Created profile: $profilePath" -Level Success
    
    return $profilePath
}

# Main execution
try {
    Write-StatusLog "üöÄ Starting repository-local module initialization..." -Level Info
    
    # Initialize local module path
    Initialize-LocalModulePath
    
    # Test local modules
    $localModules = Test-LocalModules
    
    # Create bootstrap script
    $bootstrapPath = Build-RepositoryLocalProfileBootstrap
    
    # Update installation scripts
    Update-InstallationScripts
    
    # Create repository-local profile if requested
    if ($UpdateProfile) {
        $profilePath = New-RepositoryLocalProfile
        Write-StatusLog "üìã To use the repository-local profile, run:" -Level Info
        Write-Host "   . `"$profilePath`"" -ForegroundColor Yellow
    }
    
    Write-StatusLog "üéâ Repository-local module system initialization complete!" -Level Success
    Write-StatusLog "üìã Next Steps:" -Level Info
    Write-Host "   1. Run: . `"$bootstrapPath`"" -ForegroundColor Yellow
    Write-Host "   2. Test: Get-RepositoryModules" -ForegroundColor Yellow
    Write-Host "   3. Import: Import-RepositoryModule 'ModuleName'" -ForegroundColor Yellow
    
} catch {
    Write-StatusLog "‚ùå Initialization failed: $($_.Exception.Message)" -Level Error
    throw
}
